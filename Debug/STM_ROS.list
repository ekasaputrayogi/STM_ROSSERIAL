
STM_ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b8  080051b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051c0  080051c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080051cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a98  20000074  08005240  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b0c  08005240  00020b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d889  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a4  00000000  00000000  0002d92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  00030568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001752c  00000000  00000000  00030e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000821b  00000000  00000000  00048354  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008adf4  00000000  00000000  0005056f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  000db3e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f64 	.word	0x08004f64

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08004f64 	.word	0x08004f64

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f002 f90c 	bl	8002708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f80c 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8c4 	bl	8000680 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f8:	f000 f89a 	bl	8000630 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004fc:	f000 f86e 	bl	80005dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000500:	f001 f9e4 	bl	80018cc <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  loop();
 8000504:	f001 f9f2 	bl	80018ec <loop>
 8000508:	e7fc      	b.n	8000504 <main+0x1c>
	...

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fbe5 	bl	8004cea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <SystemClock_Config+0xc8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <SystemClock_Config+0xc8>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <SystemClock_Config+0xc8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <SystemClock_Config+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <SystemClock_Config+0xcc>)
 8000556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <SystemClock_Config+0xcc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2310      	movs	r3, #16
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000578:	2300      	movs	r3, #0
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f002 ff4f 	bl	8003434 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800059c:	f000 f898 	bl	80006d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2103      	movs	r1, #3
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 f9a9 	bl	8003914 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005c8:	f000 f882 	bl	80006d0 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART1_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;//geus setting baudrate
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80005ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000614:	f003 fb4a 	bl	8003cac <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800061e:	f000 f857 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000ac4 	.word	0x20000ac4
 800062c:	40011000 	.word	0x40011000

08000630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_DMA_Init+0x4c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a0f      	ldr	r2, [pc, #60]	; (800067c <MX_DMA_Init+0x4c>)
 8000640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <MX_DMA_Init+0x4c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	203a      	movs	r0, #58	; 0x3a
 8000658:	f002 f9a3 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800065c:	203a      	movs	r0, #58	; 0x3a
 800065e:	f002 f9bc 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	2046      	movs	r0, #70	; 0x46
 8000668:	f002 f99b 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800066c:	2046      	movs	r0, #70	; 0x46
 800066e:	f002 f9b4 	bl	80029da <HAL_NVIC_EnableIRQ>

}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_GPIO_Init+0x4c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <MX_GPIO_Init+0x4c>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_GPIO_Init+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <Error_Handler+0x6>

080006d8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <_ZN3ros3MsgC1Ev+0x1c>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	08005188 	.word	0x08005188

0800071c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
      data()
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffe8 	bl	80006fc <_ZN3ros3MsgC1Ev>
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3304      	adds	r3, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ffce 	bl	80006d8 <_ZN3ros4TimeC1Ev>
    {
    }
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	08005170 	.word	0x08005170

0800074c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6859      	ldr	r1, [r3, #4]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	b2ca      	uxtb	r2, r1
 8000766:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	0a19      	lsrs	r1, r3, #8
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	4413      	add	r3, r2
 8000776:	b2ca      	uxtb	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	0c19      	lsrs	r1, r3, #16
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3302      	adds	r3, #2
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	4413      	add	r3, r2
 8000788:	b2ca      	uxtb	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	0e19      	lsrs	r1, r3, #24
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3303      	adds	r3, #3
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	b2ca      	uxtb	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3304      	adds	r3, #4
 80007a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6899      	ldr	r1, [r3, #8]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	0a19      	lsrs	r1, r3, #8
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	3301      	adds	r3, #1
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	b2ca      	uxtb	r2, r1
 80007c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	0c19      	lsrs	r1, r3, #16
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3302      	adds	r3, #2
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	4413      	add	r3, r2
 80007d2:	b2ca      	uxtb	r2, r1
 80007d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	0e19      	lsrs	r1, r3, #24
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3303      	adds	r3, #3
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	b2ca      	uxtb	r2, r1
 80007e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3304      	adds	r3, #4
 80007ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80007ee:	68fb      	ldr	r3, [r7, #12]
    }
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	6839      	ldr	r1, [r7, #0]
 8000822:	440b      	add	r3, r1
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	431a      	orrs	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	3302      	adds	r3, #2
 8000836:	6839      	ldr	r1, [r7, #0]
 8000838:	440b      	add	r3, r1
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	041b      	lsls	r3, r3, #16
 800083e:	431a      	orrs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3303      	adds	r3, #3
 800084c:	6839      	ldr	r1, [r7, #0]
 800084e:	440b      	add	r3, r1
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	061b      	lsls	r3, r3, #24
 8000854:	431a      	orrs	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3304      	adds	r3, #4
 800085e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689a      	ldr	r2, [r3, #8]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	440b      	add	r3, r1
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	021b      	lsls	r3, r3, #8
 800087e:	431a      	orrs	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3302      	adds	r3, #2
 800088c:	6839      	ldr	r1, [r7, #0]
 800088e:	440b      	add	r3, r1
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	431a      	orrs	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3303      	adds	r3, #3
 80008a2:	6839      	ldr	r1, [r7, #0]
 80008a4:	440b      	add	r3, r1
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	061b      	lsls	r3, r3, #24
 80008aa:	431a      	orrs	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3304      	adds	r3, #4
 80008b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80008b6:	68fb      	ldr	r3, [r7, #12]
    }
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08004f7c 	.word	0x08004f7c

080008e0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	08004f8c 	.word	0x08004f8c

080008fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fef8 	bl	80006fc <_ZN3ros3MsgC1Ev>
 800090c:	4a0b      	ldr	r2, [pc, #44]	; (800093c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	809a      	strh	r2, [r3, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a09      	ldr	r2, [pc, #36]	; (8000940 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a06      	ldr	r2, [pc, #24]	; (8000940 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000928:	611a      	str	r2, [r3, #16]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
    {
    }
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	08005158 	.word	0x08005158
 8000940:	08004fb0 	.word	0x08004fb0

08000944 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	8899      	ldrh	r1, [r3, #4]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	4413      	add	r3, r2
 800095c:	b2ca      	uxtb	r2, r1
 800095e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	889b      	ldrh	r3, [r3, #4]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b299      	uxth	r1, r3
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	3301      	adds	r3, #1
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	4413      	add	r3, r2
 8000970:	b2ca      	uxtb	r2, r1
 8000972:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	3302      	adds	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fc2a 	bl	80001d8 <strlen>
 8000984:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	4413      	add	r3, r2
 800098c:	69b9      	ldr	r1, [r7, #24]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 ffd8 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	3304      	adds	r3, #4
 8000998:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	18d0      	adds	r0, r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4619      	mov	r1, r3
 80009a8:	f004 f994 	bl	8004cd4 <memcpy>
      offset += length_topic_name;
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	4413      	add	r3, r2
 80009b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fc0d 	bl	80001d8 <strlen>
 80009be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	6979      	ldr	r1, [r7, #20]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 ffbb 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	18d0      	adds	r0, r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f004 f977 	bl	8004cd4 <memcpy>
      offset += length_message_type;
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	4413      	add	r3, r2
 80009ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fbf0 	bl	80001d8 <strlen>
 80009f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	6939      	ldr	r1, [r7, #16]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 ff9e 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	18d0      	adds	r0, r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f004 f95a 	bl	8004cd4 <memcpy>
      offset += length_md5sum;
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4413      	add	r3, r2
 8000a26:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000a2e:	68f9      	ldr	r1, [r7, #12]
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	4413      	add	r3, r2
 8000a36:	b2ca      	uxtb	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	0a19      	lsrs	r1, r3, #8
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3301      	adds	r3, #1
 8000a42:	683a      	ldr	r2, [r7, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	0c19      	lsrs	r1, r3, #16
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3302      	adds	r3, #2
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	4413      	add	r3, r2
 8000a56:	b2ca      	uxtb	r2, r1
 8000a58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	0e19      	lsrs	r1, r3, #24
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3303      	adds	r3, #3
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	4413      	add	r3, r2
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000a70:	69fb      	ldr	r3, [r7, #28]
    }
 8000a72:	4618      	mov	r0, r3
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b08a      	sub	sp, #40	; 0x28
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	889b      	ldrh	r3, [r3, #4]
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	6839      	ldr	r1, [r7, #0]
 8000aa2:	440b      	add	r3, r1
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	441a      	add	r2, r3
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 ff5a 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	3304      	adds	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	4413      	add	r3, r2
 8000adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d20c      	bcs.n	8000afc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	441a      	add	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6839      	ldr	r1, [r7, #0]
 8000aee:	440b      	add	r3, r1
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af6:	3301      	adds	r3, #1
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
 8000afa:	e7ec      	b.n	8000ad6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	4413      	add	r3, r2
 8000b02:	3b01      	subs	r3, #1
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	441a      	add	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	441a      	add	r2, r3
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 ff27 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3304      	adds	r3, #4
 8000b36:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	4413      	add	r3, r2
 8000b42:	6a3a      	ldr	r2, [r7, #32]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d20c      	bcs.n	8000b62 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	6839      	ldr	r1, [r7, #0]
 8000b54:	440b      	add	r3, r1
 8000b56:	7812      	ldrb	r2, [r2, #0]
 8000b58:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
 8000b60:	e7ec      	b.n	8000b3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4413      	add	r3, r2
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	441a      	add	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4413      	add	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	441a      	add	r2, r3
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fef4 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	69fa      	ldr	r2, [r7, #28]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d20c      	bcs.n	8000bc8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	441a      	add	r2, r3
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6839      	ldr	r1, [r7, #0]
 8000bba:	440b      	add	r3, r1
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e7ec      	b.n	8000ba2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4413      	add	r3, r2
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	441a      	add	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	6839      	ldr	r1, [r7, #0]
 8000bf6:	440a      	add	r2, r1
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	3301      	adds	r3, #1
 8000c04:	6839      	ldr	r1, [r7, #0]
 8000c06:	440b      	add	r3, r1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	3302      	adds	r3, #2
 8000c16:	6839      	ldr	r1, [r7, #0]
 8000c18:	440b      	add	r3, r1
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	041b      	lsls	r3, r3, #16
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	3303      	adds	r3, #3
 8000c28:	6839      	ldr	r1, [r7, #0]
 8000c2a:	440b      	add	r3, r1
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	061b      	lsls	r3, r3, #24
 8000c30:	4313      	orrs	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000c40:	69bb      	ldr	r3, [r7, #24]
    }
 8000c42:	4618      	mov	r0, r3
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	08004fb4 	.word	0x08004fb4

08000c68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	08004fd0 	.word	0x08004fd0

08000c84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fd34 	bl	80006fc <_ZN3ros3MsgC1Ev>
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	711a      	strb	r2, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000ca4:	609a      	str	r2, [r3, #8]
    {
    }
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	08005140 	.word	0x08005140
 8000cb4:	08004fb0 	.word	0x08004fb0

08000cb8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	7912      	ldrb	r2, [r2, #4]
 8000cd0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fa7b 	bl	80001d8 <strlen>
 8000ce2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	68b9      	ldr	r1, [r7, #8]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fe29 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	18d0      	adds	r0, r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f003 ffe5 	bl	8004cd4 <memcpy>
      offset += length_msg;
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
      return offset;
 8000d12:	68fb      	ldr	r3, [r7, #12]
    }
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	441a      	add	r2, r3
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fe19 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	3304      	adds	r3, #4
 8000d52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d20c      	bcs.n	8000d7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	441a      	add	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	6839      	ldr	r1, [r7, #0]
 8000d70:	440b      	add	r3, r1
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e7ec      	b.n	8000d58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	3b01      	subs	r3, #1
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	441a      	add	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
     return offset;
 8000da2:	693b      	ldr	r3, [r7, #16]
    }
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	08004ff4 	.word	0x08004ff4

08000dc8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	08005008 	.word	0x08005008

08000de4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fc84 	bl	80006fc <_ZN3ros3MsgC1Ev>
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	08005128 	.word	0x08005128

08000e40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6859      	ldr	r1, [r3, #4]
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	b2ca      	uxtb	r2, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	0a19      	lsrs	r1, r3, #8
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	3301      	adds	r3, #1
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	0c19      	lsrs	r1, r3, #16
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	3302      	adds	r3, #2
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b2ca      	uxtb	r2, r1
 8000e7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	0e19      	lsrs	r1, r3, #24
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	3303      	adds	r3, #3
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2ca      	uxtb	r2, r1
 8000e90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	3304      	adds	r3, #4
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	6a3a      	ldr	r2, [r7, #32]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d22b      	bcs.n	8000efe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000eb4:	6939      	ldr	r1, [r7, #16]
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b2ca      	uxtb	r2, r1
 8000ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	0a19      	lsrs	r1, r3, #8
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2ca      	uxtb	r2, r1
 8000ece:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	0c19      	lsrs	r1, r3, #16
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	b2ca      	uxtb	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	0e19      	lsrs	r1, r3, #24
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	3303      	adds	r3, #3
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	623b      	str	r3, [r7, #32]
 8000efc:	e7ce      	b.n	8000e9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6919      	ldr	r1, [r3, #16]
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	b2ca      	uxtb	r2, r1
 8000f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	0a19      	lsrs	r1, r3, #8
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	3301      	adds	r3, #1
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	b2ca      	uxtb	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	0c19      	lsrs	r1, r3, #16
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	3302      	adds	r3, #2
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b2ca      	uxtb	r2, r1
 8000f2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	0e19      	lsrs	r1, r3, #24
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	3303      	adds	r3, #3
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	3304      	adds	r3, #4
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d22b      	bcs.n	8000fae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699a      	ldr	r2, [r3, #24]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000f64:	68f9      	ldr	r1, [r7, #12]
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b2ca      	uxtb	r2, r1
 8000f6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	0a19      	lsrs	r1, r3, #8
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	3301      	adds	r3, #1
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2ca      	uxtb	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	0c19      	lsrs	r1, r3, #16
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	3302      	adds	r3, #2
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b2ca      	uxtb	r2, r1
 8000f8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	0e19      	lsrs	r1, r3, #24
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	3303      	adds	r3, #3
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b2ca      	uxtb	r2, r1
 8000f9e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	e7ce      	b.n	8000f4c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69d9      	ldr	r1, [r3, #28]
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2ca      	uxtb	r2, r1
 8000fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	0a19      	lsrs	r1, r3, #8
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	b2ca      	uxtb	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	0c19      	lsrs	r1, r3, #16
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	b2ca      	uxtb	r2, r1
 8000fde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	0e19      	lsrs	r1, r3, #24
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3303      	adds	r3, #3
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	b2ca      	uxtb	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	429a      	cmp	r2, r3
 8001004:	d228      	bcs.n	8001058 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f8e0 	bl	80001d8 <strlen>
 8001018:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	4413      	add	r3, r2
 8001020:	6979      	ldr	r1, [r7, #20]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fc8e 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	3304      	adds	r3, #4
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	18d0      	adds	r0, r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	4619      	mov	r1, r3
 8001044:	f003 fe46 	bl	8004cd4 <memcpy>
      offset += length_stringsi;
 8001048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	4413      	add	r3, r2
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	3301      	adds	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	e7d1      	b.n	8000ffc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800105a:	4618      	mov	r0, r3
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001062:	b580      	push	{r7, lr}
 8001064:	b08e      	sub	sp, #56	; 0x38
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107c:	3301      	adds	r3, #1
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	6a3a      	ldr	r2, [r7, #32]
 8001088:	4313      	orrs	r3, r2
 800108a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108e:	3302      	adds	r3, #2
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	4413      	add	r3, r2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	6a3a      	ldr	r2, [r7, #32]
 800109a:	4313      	orrs	r3, r2
 800109c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800109e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a0:	3303      	adds	r3, #3
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	061b      	lsls	r3, r3, #24
 80010aa:	6a3a      	ldr	r2, [r7, #32]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80010b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b2:	3304      	adds	r3, #4
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	6a3a      	ldr	r2, [r7, #32]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d90a      	bls.n	80010d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f003 fe16 	bl	8004cfc <realloc>
 80010d0:	4602      	mov	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a3a      	ldr	r2, [r7, #32]
 80010da:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d236      	bcs.n	8001158 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	440a      	add	r2, r1
 80010f6:	7812      	ldrb	r2, [r2, #0]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	3301      	adds	r3, #1
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	440b      	add	r3, r1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	4313      	orrs	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001112:	3302      	adds	r3, #2
 8001114:	6839      	ldr	r1, [r7, #0]
 8001116:	440b      	add	r3, r1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	041b      	lsls	r3, r3, #16
 800111c:	4313      	orrs	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001124:	3303      	adds	r3, #3
 8001126:	6839      	ldr	r1, [r7, #0]
 8001128:	440b      	add	r3, r1
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	061b      	lsls	r3, r3, #24
 800112e:	4313      	orrs	r3, r2
 8001130:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113a:	3304      	adds	r3, #4
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001152:	3301      	adds	r3, #1
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
 8001156:	e7c3      	b.n	80010e0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001164:	3301      	adds	r3, #1
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	4313      	orrs	r3, r2
 8001172:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001176:	3302      	adds	r3, #2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	041b      	lsls	r3, r3, #16
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	4313      	orrs	r3, r2
 8001184:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001188:	3303      	adds	r3, #3
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	061b      	lsls	r3, r3, #24
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	4313      	orrs	r3, r2
 8001196:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119a:	3304      	adds	r3, #4
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d90a      	bls.n	80011be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699a      	ldr	r2, [r3, #24]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4619      	mov	r1, r3
 80011b2:	4610      	mov	r0, r2
 80011b4:	f003 fda2 	bl	8004cfc <realloc>
 80011b8:	4602      	mov	r2, r0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d236      	bcs.n	8001240 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011da:	6839      	ldr	r1, [r7, #0]
 80011dc:	440a      	add	r2, r1
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	3301      	adds	r3, #1
 80011ea:	6839      	ldr	r1, [r7, #0]
 80011ec:	440b      	add	r3, r1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fa:	3302      	adds	r3, #2
 80011fc:	6839      	ldr	r1, [r7, #0]
 80011fe:	440b      	add	r3, r1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120c:	3303      	adds	r3, #3
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	440b      	add	r3, r1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	061b      	lsls	r3, r3, #24
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001222:	3304      	adds	r3, #4
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699a      	ldr	r2, [r3, #24]
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	3214      	adds	r2, #20
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	3301      	adds	r3, #1
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123e:	e7c3      	b.n	80011c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124c:	3301      	adds	r3, #1
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125e:	3302      	adds	r3, #2
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	041b      	lsls	r3, r3, #16
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800126e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001270:	3303      	adds	r3, #3
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	061b      	lsls	r3, r3, #24
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001282:	3304      	adds	r3, #4
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	429a      	cmp	r2, r3
 800128e:	d90a      	bls.n	80012a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4619      	mov	r1, r3
 800129a:	4610      	mov	r0, r2
 800129c:	f003 fd2e 	bl	8004cfc <realloc>
 80012a0:	4602      	mov	r2, r0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d23f      	bcs.n	800133a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80012ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	441a      	add	r2, r3
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fb5a 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ce:	3304      	adds	r3, #4
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80012d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
 80012d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012de:	429a      	cmp	r2, r3
 80012e0:	d20c      	bcs.n	80012fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	441a      	add	r2, r3
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	440b      	add	r3, r1
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	3301      	adds	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
 80012fa:	e7ec      	b.n	80012d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80012fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	3b01      	subs	r3, #1
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130e:	3b01      	subs	r3, #1
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	441a      	add	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	3220      	adds	r2, #32
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001334:	3301      	adds	r3, #1
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
 8001338:	e7ba      	b.n	80012b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800133a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800133c:	4618      	mov	r0, r3
 800133e:	3738      	adds	r7, #56	; 0x38
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	080050c4 	.word	0x080050c4

08001360 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	0800502c 	.word	0x0800502c

0800137c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68d8      	ldr	r0, [r3, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6891      	ldr	r1, [r2, #8]
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	4798      	blx	r3
 80013c8:	4603      	mov	r3, r0
  };
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
  }
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	425b      	negs	r3, r3
 80013fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <_ZN13STM32HardwareC1Ev+0x34>)
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20000ac4 	.word	0x20000ac4

08001448 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f804 	bl	800145e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3304      	adds	r3, #4
 800146e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001472:	4619      	mov	r1, r3
 8001474:	f002 fcd4 	bl	8003e20 <HAL_UART_Receive_DMA>
    }
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800148c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ffa8 	bl	80013ea <_ZN13STM32Hardware10getRdmaIndEv>
 800149a:	4603      	mov	r3, r0
 800149c:	429c      	cmp	r4, r3
 800149e:	bf14      	ite	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	2300      	moveq	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d012      	beq.n	80014d0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014b0:	1c59      	adds	r1, r3, #1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	791b      	ldrb	r3, [r3, #4]
 80014be:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80014d0:	68fb      	ldr	r3, [r7, #12]
    }
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd90      	pop	{r4, r7, pc}
	...

080014dc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d108      	bne.n	8001504 <_ZN13STM32Hardware5flushEv+0x28>
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <_ZN13STM32Hardware5flushEv+0xb8>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	f083 0301 	eor.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <_ZN13STM32Hardware5flushEv+0x28>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <_ZN13STM32Hardware5flushEv+0x2a>
 8001504:	2300      	movs	r3, #0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d03f      	beq.n	800158a <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <_ZN13STM32Hardware5flushEv+0xb8>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800151c:	429a      	cmp	r2, r3
 800151e:	d031      	beq.n	8001584 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800152c:	429a      	cmp	r2, r3
 800152e:	d20a      	bcs.n	8001546 <_ZN13STM32Hardware5flushEv+0x6a>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800153e:	b29b      	uxth	r3, r3
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	b29b      	uxth	r3, r3
 8001544:	e006      	b.n	8001554 <_ZN13STM32Hardware5flushEv+0x78>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800154c:	b29b      	uxth	r3, r3
 800154e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001552:	b29b      	uxth	r3, r3
 8001554:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001560:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	89fa      	ldrh	r2, [r7, #14]
 800156a:	4619      	mov	r1, r3
 800156c:	f002 fbec 	bl	8003d48 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	4413      	add	r3, r2
 800157a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
      }
    }
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000090 	.word	0x20000090

08001598 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
      int n = length;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ae:	bfa8      	it	ge
 80015b0:	f44f 7300 	movge.w	r3, #512	; 0x200
 80015b4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015bc:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	4293      	cmp	r3, r2
 80015c4:	bf28      	it	cs
 80015c6:	4613      	movcs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fb79 	bl	8004cd4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	4413      	add	r3, r2
 80015ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d00b      	beq.n	8001616 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	18d1      	adds	r1, r2, r3
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	461a      	mov	r2, r3
 8001612:	f003 fb5f 	bl	8004cd4 <memcpy>
      }

      flush();
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff ff60 	bl	80014dc <_ZN13STM32Hardware5flushEv>
    }
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	f001 f8d2 	bl	80027d4 <HAL_GetTick>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
      data(0)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f858 	bl	80006fc <_ZN3ros3MsgC1Ev>
 800164c:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_ZN8std_msgs5Int32C1Ev+0x28>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
    {
    }
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	080050fc 	.word	0x080050fc

08001668 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	b2ca      	uxtb	r2, r1
 8001686:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	0a19      	lsrs	r1, r3, #8
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3301      	adds	r3, #1
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	4413      	add	r3, r2
 8001694:	b2ca      	uxtb	r2, r1
 8001696:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0c19      	lsrs	r1, r3, #16
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3302      	adds	r3, #2
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	b2ca      	uxtb	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	0e19      	lsrs	r1, r3, #24
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3303      	adds	r3, #3
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3304      	adds	r3, #4
 80016bc:	60fb      	str	r3, [r7, #12]
      return offset;
 80016be:	68fb      	ldr	r3, [r7, #12]
    }
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	6839      	ldr	r1, [r7, #0]
 80016e4:	440a      	add	r2, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	6839      	ldr	r1, [r7, #0]
 80016f4:	440b      	add	r3, r1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3302      	adds	r3, #2
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	440b      	add	r3, r1
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	041b      	lsls	r3, r3, #16
 800170c:	4313      	orrs	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3303      	adds	r3, #3
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	440b      	add	r3, r1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	4313      	orrs	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3304      	adds	r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
     return offset;
 800172e:	68fb      	ldr	r3, [r7, #12]
    }
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN8std_msgs5Int327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int32"; };
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	08005050 	.word	0x08005050

08001758 <_ZN8std_msgs5Int326getMD5Ev>:
    virtual const char * getMD5() override { return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	08005060 	.word	0x08005060

08001774 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	08005114 	.word	0x08005114

08001794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ffe8 	bl	8001774 <_ZN3ros15NodeHandleBase_C1Ev>
 80017a4:	4a36      	ldr	r2, [pc, #216]	; (8001880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fe2e 	bl	8001410 <_ZN13STM32HardwareC1Ev>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fa82 	bl	8004cea <memset>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80017ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 fa79 	bl	8004cea <memset>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80017fe:	2264      	movs	r2, #100	; 0x64
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fa71 	bl	8004cea <memset>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800180e:	2264      	movs	r2, #100	; 0x64
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fa69 	bl	8004cea <memset>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fab8 	bl	8000de4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	080050e8 	.word	0x080050e8

08001884 <HAL_UART_TxCpltCallback>:
ros::Publisher num_pub("num",&num_msg);
uint32_t nowTick = 0;
uint32_t pastTick = 0;
int num_test = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	//if (huart->Instance == USART1)
		nh.getHardware() -> flush();
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_UART_TxCpltCallback+0x20>)
 800188e:	f000 f89c 	bl	80019ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001892:	4603      	mov	r3, r0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fe21 	bl	80014dc <_ZN13STM32Hardware5flushEv>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000094 	.word	0x20000094

080018a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	//if (huart->Instance == USART1)
		nh.getHardware() -> reset_rbuf();
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_UART_RxCpltCallback+0x20>)
 80018b2:	f000 f88a 	bl	80019ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fdd0 	bl	800145e <_ZN13STM32Hardware10reset_rbufEv>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000094 	.word	0x20000094

080018cc <setup>:

void setup()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
nh.initNode();
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <setup+0x18>)
 80018d2:	f000 f886 	bl	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
nh.advertise(num_pub);
 80018d6:	4904      	ldr	r1, [pc, #16]	; (80018e8 <setup+0x1c>)
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <setup+0x18>)
 80018da:	f000 f89f 	bl	8001a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
//nh.getHardware()->setBaud(57600); // Setting Perubahan baudrate

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000094 	.word	0x20000094
 80018e8:	200009d8 	.word	0x200009d8

080018ec <loop>:
void loop()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
nowTick = HAL_GetTick();
 80018f0:	f000 ff70 	bl	80027d4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <loop+0x44>)
 80018f8:	601a      	str	r2, [r3, #0]
if (nowTick - pastTick > 100)
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <loop+0x44>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <loop+0x48>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b64      	cmp	r3, #100	; 0x64
 8001906:	d910      	bls.n	800192a <loop+0x3e>
{
	num_msg.data = num_test;
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <loop+0x4c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0b      	ldr	r2, [pc, #44]	; (800193c <loop+0x50>)
 800190e:	6053      	str	r3, [r2, #4]
	num_pub.publish(&num_msg);
 8001910:	490a      	ldr	r1, [pc, #40]	; (800193c <loop+0x50>)
 8001912:	480b      	ldr	r0, [pc, #44]	; (8001940 <loop+0x54>)
 8001914:	f7ff fd49 	bl	80013aa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nowTick = pastTick;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <loop+0x48>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <loop+0x44>)
 800191e:	6013      	str	r3, [r2, #0]
	num_test++	;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <loop+0x4c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <loop+0x4c>)
 8001928:	6013      	str	r3, [r2, #0]
}
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200009ec 	.word	0x200009ec
 8001934:	200009f0 	.word	0x200009f0
 8001938:	200009f4 	.word	0x200009f4
 800193c:	200009d0 	.word	0x200009d0
 8001940:	200009d8 	.word	0x200009d8

08001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d80d      	bhi.n	8001974 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	fa22 f103 	lsr.w	r1, r2, r3
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	b2ca      	uxtb	r2, r1
 800196a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3301      	adds	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e7ee      	b.n	8001952 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d811      	bhi.n	80019be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	440a      	add	r2, r1
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	4611      	mov	r1, r2
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	00d2      	lsls	r2, r2, #3
 80019ac:	fa01 f202 	lsl.w	r2, r1, r2
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e7ea      	b.n	8001994 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3304      	adds	r3, #4
  }
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3304      	adds	r3, #4
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fd2a 	bl	8001448 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b18      	cmp	r3, #24
 8001a2e:	dc1e      	bgt.n	8001a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d111      	bne.n	8001a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	60da      	str	r2, [r3, #12]
        return true;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e004      	b.n	8001a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e7dd      	b.n	8001a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001a6e:	2300      	movs	r3, #0
  }
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_Z41__static_initialization_and_destruction_0ii>:
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d110      	bne.n	8001aae <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d10b      	bne.n	8001aae <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8001a96:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001a98:	f7ff fe7c 	bl	8001794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int32 num_msg;
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a9e:	f7ff fdcd 	bl	800163c <_ZN8std_msgs5Int32C1Ev>
ros::Publisher num_pub("num",&num_msg);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001aa6:	4906      	ldr	r1, [pc, #24]	; (8001ac0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001aa8:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001aaa:	f7ff fc67 	bl	800137c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000094 	.word	0x20000094
 8001abc:	200009d0 	.word	0x200009d0
 8001ac0:	08005084 	.word	0x08005084
 8001ac4:	200009d8 	.word	0x200009d8

08001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg) override
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b63      	cmp	r3, #99	; 0x63
 8001ad8:	dd09      	ble.n	8001aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e077      	b.n	8001bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001afa:	3207      	adds	r2, #7
 8001afc:	4611      	mov	r1, r2
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
 8001b02:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	22ff      	movs	r2, #255	; 0xff
 8001b08:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	22fe      	movs	r2, #254	; 0xfe
 8001b10:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	121b      	asrs	r3, r3, #8
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001b38:	4413      	add	r3, r2
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	121b      	asrs	r3, r3, #8
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001b62:	2305      	movs	r3, #5
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3307      	adds	r3, #7
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	da0d      	bge.n	8001b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4413      	add	r3, r2
 8001b76:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	4413      	add	r3, r2
 8001b82:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	e7ec      	b.n	8001b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3307      	adds	r3, #7
 8001b90:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	425a      	negs	r2, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	bf58      	it	pl
 8001b9c:	4253      	negpl	r3, r2
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	1c59      	adds	r1, r3, #1
 8001ba4:	6179      	str	r1, [r7, #20]
 8001ba6:	43d2      	mvns	r2, r2
 8001ba8:	b2d1      	uxtb	r1, r2
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	460a      	mov	r2, r1
 8001bb0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bba:	dc0a      	bgt.n	8001bd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1d18      	adds	r0, r3, #4
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7ff fce5 	bl	8001598 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	e005      	b.n	8001bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001bd2:	4905      	ldr	r1, [pc, #20]	; (8001be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f9f2 	bl	8001fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8001bde:	4618      	mov	r0, r3
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	08005088 	.word	0x08005088

08001bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fd13 	bl	8001624 <_ZN13STM32Hardware4timeEv>
 8001bfe:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d903      	bls.n	8001c1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d009      	beq.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d903      	bls.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d014      	beq.n	8001c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3304      	adds	r3, #4
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fcec 	bl	8001624 <_ZN13STM32Hardware4timeEv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad2      	subs	r2, r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	bf8c      	ite	hi
 8001c5c:	2301      	movhi	r3, #1
 8001c5e:	2300      	movls	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001c66:	f06f 0301 	mvn.w	r3, #1
 8001c6a:	e197      	b.n	8001f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fc05 	bl	8001480 <_ZN13STM32Hardware4readEv>
 8001c76:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f2c0 8177 	blt.w	8001f6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	441a      	add	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	d11e      	bne.n	8001cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001ca0:	1c59      	adds	r1, r3, #1
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	b2d1      	uxtb	r1, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1b4      	bne.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001cd6:	e7af      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d128      	bne.n	8001d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2bff      	cmp	r3, #255	; 0xff
 8001ce6:	d10d      	bne.n	8001d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f103 0214 	add.w	r2, r3, #20
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001d02:	e799      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fc8b 	bl	8001624 <_ZN13STM32Hardware4timeEv>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	bf8c      	ite	hi
 8001d1c:	2301      	movhi	r3, #1
 8001d1e:	2300      	movls	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d088      	beq.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001d2e:	f06f 0301 	mvn.w	r3, #1
 8001d32:	e133      	b.n	8001f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d11b      	bne.n	8001d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2bfe      	cmp	r3, #254	; 0xfe
 8001d42:	d107      	bne.n	8001d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d52:	e771      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001d62:	f083 0301 	eor.w	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f43f af65 	beq.w	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f933 	bl	8001fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001d74:	e760      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d113      	bne.n	8001da8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001da6:	e747      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d110      	bne.n	8001dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	441a      	add	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001dd2:	e731      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d116      	bne.n	8001e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001de4:	425a      	negs	r2, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	bf58      	it	pl
 8001dec:	4253      	negpl	r3, r2
 8001dee:	2bff      	cmp	r3, #255	; 0xff
 8001df0:	d107      	bne.n	8001e02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e00:	e71a      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e0a:	e715      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d10f      	bne.n	8001e36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001e34:	e700      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e3c:	2b06      	cmp	r3, #6
 8001e3e:	d117      	bne.n	8001e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	441a      	add	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2207      	movs	r2, #7
 8001e56:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f47f aee9 	bne.w	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e6e:	e6e3      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	f47f aede 	bne.w	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001e8a:	425a      	negs	r2, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	bf58      	it	pl
 8001e92:	4253      	negpl	r3, r2
 8001e94:	2bff      	cmp	r3, #255	; 0xff
 8001e96:	f47f aecf 	bne.w	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d110      	bne.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f898 	bl	8001fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8b3 	bl	8002016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec4:	e06a      	b.n	8001f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ecc:	2b0a      	cmp	r3, #10
 8001ece:	d107      	bne.n	8001ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f97b 	bl	80021d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001ede:	e6ab      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d10e      	bne.n	8001f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f7ff f8b2 	bl	8001062 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001f06:	e697      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f0e:	2b0b      	cmp	r3, #11
 8001f10:	d104      	bne.n	8001f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001f1a:	e68d      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f22:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f43f ae81 	beq.w	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f3c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f50:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4798      	blx	r3
    while (true)
 8001f6c:	e664      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001f6e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00f      	beq.n	8001f9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d906      	bls.n	8001f9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f824 	bl	8001fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001f9a:	2300      	movs	r3, #0
  }
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    return configured_;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	2103      	movs	r1, #3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f94d 	bl	800226c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fb98 	bl	800071c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f107 020c 	add.w	r2, r7, #12
 8001ff6:	210a      	movs	r1, #10
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
    rt_time = hardware_.time();
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fb0f 	bl	8001624 <_ZN13STM32Hardware4timeEv>
 8002006:	4602      	mov	r2, r0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8002016:	b590      	push	{r4, r7, lr}
 8002018:	b08b      	sub	sp, #44	; 0x2c
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fc6a 	bl	80008fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	2b18      	cmp	r3, #24
 8002030:	dc63      	bgt.n	80020fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d056      	beq.n	80020f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	b29b      	uxth	r3, r3
 8002056:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3308      	adds	r3, #8
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4608      	mov	r0, r1
 8002092:	4798      	blx	r3
 8002094:	4603      	mov	r3, r0
 8002096:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	330c      	adds	r3, #12
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4608      	mov	r0, r1
 80020c0:	4798      	blx	r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80020c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ca:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681c      	ldr	r4, [r3, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff f976 	bl	80013d2 <_ZN3ros9Publisher15getEndpointTypeEv>
 80020e6:	4601      	mov	r1, r0
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	461a      	mov	r2, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e798      	b.n	800202c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	2b18      	cmp	r3, #24
 8002102:	dc5f      	bgt.n	80021c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002108:	f202 2222 	addw	r2, r2, #546	; 0x222
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d053      	beq.n	80021bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002118:	f202 2222 	addw	r2, r2, #546	; 0x222
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	b29b      	uxth	r3, r3
 8002124:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800212e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800213e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	f202 2222 	addw	r2, r2, #546	; 0x222
 800214a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3308      	adds	r3, #8
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4608      	mov	r0, r1
 8002156:	4798      	blx	r3
 8002158:	4603      	mov	r3, r0
 800215a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002160:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	330c      	adds	r3, #12
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4608      	mov	r0, r1
 800217c:	4798      	blx	r3
 800217e:	4603      	mov	r3, r0
 8002180:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002186:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681c      	ldr	r4, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002192:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219e:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3304      	adds	r3, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4798      	blx	r3
 80021b0:	4601      	mov	r1, r0
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	461a      	mov	r2, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	3301      	adds	r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	e79c      	b.n	80020fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80021cc:	bf00      	nop
 80021ce:	372c      	adds	r7, #44	; 0x2c
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd90      	pop	{r4, r7, pc}

080021d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fa9a 	bl	800071c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fa19 	bl	8001624 <_ZN13STM32Hardware4timeEv>
 80021f2:	4602      	mov	r2, r0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe faf9 	bl	80007fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	4915      	ldr	r1, [pc, #84]	; (8002264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002210:	fba1 1303 	umull	r1, r3, r1, r3
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800221a:	6939      	ldr	r1, [r7, #16]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002220:	fba3 0302 	umull	r0, r3, r3, r2
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800222a:	fb00 f303 	mul.w	r3, r0, r3
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	440b      	add	r3, r1
 8002238:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	3304      	adds	r3, #4
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f82e 	bl	80022a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3304      	adds	r3, #4
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f9e9 	bl	8001624 <_ZN13STM32Hardware4timeEv>
 8002252:	4602      	mov	r2, r0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	10624dd3 	.word	0x10624dd3
 8002268:	000f4240 	.word	0x000f4240

0800226c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	460b      	mov	r3, r1
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fd00 	bl	8000c84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f107 0214 	add.w	r2, r7, #20
 8002296:	2107      	movs	r1, #7
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	4798      	blx	r3
  }
 800229c:	bf00      	nop
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f9b6 	bl	8001624 <_ZN13STM32Hardware4timeEv>
 80022b8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4915      	ldr	r1, [pc, #84]	; (8002318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80022c2:	fba1 1303 	umull	r1, r3, r1, r3
 80022c6:	099b      	lsrs	r3, r3, #6
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	1e5a      	subs	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6859      	ldr	r1, [r3, #4]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80022da:	fba3 0302 	umull	r0, r3, r3, r2
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022e4:	fb00 f303 	mul.w	r3, r0, r3
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	4a0c      	ldr	r2, [pc, #48]	; (800231c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	1aca      	subs	r2, r1, r3
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80022f4:	4413      	add	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f000 f9a6 	bl	800265c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	10624dd3 	.word	0x10624dd3
 800231c:	000f4240 	.word	0x000f4240
 8002320:	3b9aca00 	.word	0x3b9aca00

08002324 <_GLOBAL__sub_I_nh>:
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
 8002328:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800232c:	2001      	movs	r0, #1
 800232e:	f7ff fba5 	bl	8001a7c <_Z41__static_initialization_and_destruction_0ii>
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_MspInit+0x4c>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <HAL_MspInit+0x4c>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_MspInit+0x4c>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_MspInit+0x4c>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_MspInit+0x4c>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_MspInit+0x4c>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800

08002384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a4c      	ldr	r2, [pc, #304]	; (80024d4 <HAL_UART_MspInit+0x150>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	f040 8091 	bne.w	80024ca <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <HAL_UART_MspInit+0x154>)
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	4a49      	ldr	r2, [pc, #292]	; (80024d8 <HAL_UART_MspInit+0x154>)
 80023b2:	f043 0310 	orr.w	r3, r3, #16
 80023b6:	6453      	str	r3, [r2, #68]	; 0x44
 80023b8:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_UART_MspInit+0x154>)
 80023ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_UART_MspInit+0x154>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	4a42      	ldr	r2, [pc, #264]	; (80024d8 <HAL_UART_MspInit+0x154>)
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	6313      	str	r3, [r2, #48]	; 0x30
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <HAL_UART_MspInit+0x154>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e0:	23c0      	movs	r3, #192	; 0xc0
 80023e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f0:	2307      	movs	r3, #7
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	4838      	ldr	r0, [pc, #224]	; (80024dc <HAL_UART_MspInit+0x158>)
 80023fc:	f000 fe98 	bl	8003130 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002400:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 8002402:	4a38      	ldr	r2, [pc, #224]	; (80024e4 <HAL_UART_MspInit+0x160>)
 8002404:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 8002408:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800240e:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002414:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800241a:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 800241c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002420:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 8002424:	2200      	movs	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 8002430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002434:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800243c:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002442:	4827      	ldr	r0, [pc, #156]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 8002444:	f000 fae4 	bl	8002a10 <HAL_DMA_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800244e:	f7fe f93f 	bl	80006d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 8002456:	635a      	str	r2, [r3, #52]	; 0x34
 8002458:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <HAL_UART_MspInit+0x15c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_UART_MspInit+0x164>)
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <HAL_UART_MspInit+0x168>)
 8002462:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_UART_MspInit+0x164>)
 8002466:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800246a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_UART_MspInit+0x164>)
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_UART_MspInit+0x164>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_UART_MspInit+0x164>)
 800247a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800247e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_UART_MspInit+0x164>)
 8002482:	2200      	movs	r2, #0
 8002484:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_UART_MspInit+0x164>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_UART_MspInit+0x164>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_UART_MspInit+0x164>)
 8002494:	2200      	movs	r2, #0
 8002496:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_UART_MspInit+0x164>)
 800249a:	2200      	movs	r2, #0
 800249c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800249e:	4812      	ldr	r0, [pc, #72]	; (80024e8 <HAL_UART_MspInit+0x164>)
 80024a0:	f000 fab6 	bl	8002a10 <HAL_DMA_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80024aa:	f7fe f911 	bl	80006d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <HAL_UART_MspInit+0x164>)
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
 80024b4:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <HAL_UART_MspInit+0x164>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2025      	movs	r0, #37	; 0x25
 80024c0:	f000 fa6f 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024c4:	2025      	movs	r0, #37	; 0x25
 80024c6:	f000 fa88 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024ca:	bf00      	nop
 80024cc:	3728      	adds	r7, #40	; 0x28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40011000 	.word	0x40011000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400
 80024e0:	20000a64 	.word	0x20000a64
 80024e4:	40026440 	.word	0x40026440
 80024e8:	20000a04 	.word	0x20000a04
 80024ec:	400264b8 	.word	0x400264b8

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <NMI_Handler+0x4>

080024f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <HardFault_Handler+0x4>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <MemManage_Handler+0x4>

08002502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <BusFault_Handler+0x4>

08002508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <UsageFault_Handler+0x4>

0800250e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253c:	f000 f936 	bl	80027ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <USART1_IRQHandler+0x10>)
 800254a:	f001 fce9 	bl	8003f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000ac4 	.word	0x20000ac4

08002558 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <DMA2_Stream2_IRQHandler+0x10>)
 800255e:	f000 fb7f 	bl	8002c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000a64 	.word	0x20000a64

0800256c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <DMA2_Stream7_IRQHandler+0x10>)
 8002572:	f000 fb75 	bl	8002c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000a04 	.word	0x20000a04

08002580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
	return 1;
 8002584:	2301      	movs	r3, #1
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_kill>:

int _kill(int pid, int sig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800259a:	f002 fb71 	bl	8004c80 <__errno>
 800259e:	4602      	mov	r2, r0
 80025a0:	2316      	movs	r3, #22
 80025a2:	6013      	str	r3, [r2, #0]
	return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_exit>:

void _exit (int status)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffe7 	bl	8002590 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025c2:	e7fe      	b.n	80025c2 <_exit+0x12>

080025c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <_sbrk+0x5c>)
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <_sbrk+0x60>)
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <_sbrk+0x64>)
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <_sbrk+0x68>)
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f4:	f002 fb44 	bl	8004c80 <__errno>
 80025f8:	4602      	mov	r2, r0
 80025fa:	230c      	movs	r3, #12
 80025fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002602:	e009      	b.n	8002618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <_sbrk+0x64>)
 8002614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20020000 	.word	0x20020000
 8002624:	00000400 	.word	0x00000400
 8002628:	200009f8 	.word	0x200009f8
 800262c:	20000b10 	.word	0x20000b10

08002630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <SystemInit+0x28>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <SystemInit+0x28>)
 800263c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <SystemInit+0x28>)
 8002646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800264a:	609a      	str	r2, [r3, #8]
#endif
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0a5a      	lsrs	r2, r3, #9
 800266c:	490f      	ldr	r1, [pc, #60]	; (80026ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800266e:	fba1 1202 	umull	r1, r2, r1, r2
 8002672:	09d2      	lsrs	r2, r2, #7
 8002674:	490e      	ldr	r1, [pc, #56]	; (80026b0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8002676:	fb01 f202 	mul.w	r2, r1, r2
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0a5b      	lsrs	r3, r3, #9
 8002684:	4a09      	ldr	r2, [pc, #36]	; (80026ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	09db      	lsrs	r3, r3, #7
 800268c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	441a      	add	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	00044b83 	.word	0x00044b83
 80026b0:	3b9aca00 	.word	0x3b9aca00

080026b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ba:	e003      	b.n	80026c4 <LoopCopyDataInit>

080026bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026c2:	3104      	adds	r1, #4

080026c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026cc:	d3f6      	bcc.n	80026bc <CopyDataInit>
  ldr  r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026d0:	e002      	b.n	80026d8 <LoopFillZerobss>

080026d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026d4:	f842 3b04 	str.w	r3, [r2], #4

080026d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026dc:	d3f9      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026de:	f7ff ffa7 	bl	8002630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f002 fad3 	bl	8004c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e6:	f7fd feff 	bl	80004e8 <main>
  bx  lr    
 80026ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026f0:	080051cc 	.word	0x080051cc
  ldr  r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026f8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80026fc:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002700:	20000b0c 	.word	0x20000b0c

08002704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC_IRQHandler>
	...

08002708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <HAL_Init+0x40>)
 8002712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <HAL_Init+0x40>)
 800271e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_Init+0x40>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f000 f92b 	bl	800298c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002736:	2000      	movs	r0, #0
 8002738:	f000 f808 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff fdfa 	bl	8002334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f943 	bl	80029f6 <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002788:	f000 f90b 	bl	80029a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000008 	.word	0x20000008
 80027a8:	20000004 	.word	0x20000004

080027ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x20>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_IncTick+0x24>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_IncTick+0x24>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000008 	.word	0x20000008
 80027d0:	20000b04 	.word	0x20000b04

080027d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_GetTick+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000b04 	.word	0x20000b04

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <__NVIC_EnableIRQ+0x38>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	; (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002958:	d301      	bcc.n	800295e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295a:	2301      	movs	r3, #1
 800295c:	e00f      	b.n	800297e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <SysTick_Config+0x40>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002966:	210f      	movs	r1, #15
 8002968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800296c:	f7ff ff8e 	bl	800288c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <SysTick_Config+0x40>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <SysTick_Config+0x40>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000e010 	.word	0xe000e010

0800298c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff29 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b4:	f7ff ff3e 	bl	8002834 <__NVIC_GetPriorityGrouping>
 80029b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f7ff ff8e 	bl	80028e0 <NVIC_EncodePriority>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff5d 	bl	800288c <__NVIC_SetPriority>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff31 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffa2 	bl	8002948 <SysTick_Config>
 8002a04:	4603      	mov	r3, r0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff feda 	bl	80027d4 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e099      	b.n	8002b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4c:	e00f      	b.n	8002a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4e:	f7ff fec1 	bl	80027d4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d908      	bls.n	8002a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e078      	b.n	8002b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e8      	bne.n	8002a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_DMA_Init+0x158>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d107      	bne.n	8002ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f023 0307 	bic.w	r3, r3, #7
 8002aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d117      	bne.n	8002b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fa91 	bl	800303c <DMA_CheckFifoParam>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2240      	movs	r2, #64	; 0x40
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e016      	b.n	8002b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa48 	bl	8002fd0 <DMA_CalcBaseAndBitshift>
 8002b40:	4603      	mov	r3, r0
 8002b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	223f      	movs	r2, #63	; 0x3f
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	f010803f 	.word	0xf010803f

08002b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_DMA_Start_IT+0x26>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e040      	b.n	8002c14 <HAL_DMA_Start_IT+0xa8>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d12f      	bne.n	8002c06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f9da 	bl	8002f74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	223f      	movs	r2, #63	; 0x3f
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0216 	orr.w	r2, r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0208 	orr.w	r2, r2, #8
 8002bf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e005      	b.n	8002c12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d004      	beq.n	8002c3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00c      	b.n	8002c54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c6c:	4b92      	ldr	r3, [pc, #584]	; (8002eb8 <HAL_DMA_IRQHandler+0x258>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a92      	ldr	r2, [pc, #584]	; (8002ebc <HAL_DMA_IRQHandler+0x25c>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0a9b      	lsrs	r3, r3, #10
 8002c78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01a      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	2208      	movs	r2, #8
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d012      	beq.n	8002d02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	2201      	movs	r2, #1
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 0202 	orr.w	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	2204      	movs	r2, #4
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	2204      	movs	r2, #4
 8002d26:	409a      	lsls	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f043 0204 	orr.w	r2, r3, #4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d043      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d03c      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	2210      	movs	r2, #16
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d018      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d024      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
 8002d8e:	e01f      	b.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01b      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	e016      	b.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d107      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0208 	bic.w	r2, r2, #8
 8002dbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 808e 	beq.w	8002efe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8086 	beq.w	8002efe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2220      	movs	r2, #32
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d136      	bne.n	8002e78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0216 	bic.w	r2, r2, #22
 8002e18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_DMA_IRQHandler+0x1da>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0208 	bic.w	r2, r2, #8
 8002e48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	223f      	movs	r2, #63	; 0x3f
 8002e50:	409a      	lsls	r2, r3
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d07d      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
        }
        return;
 8002e76:	e078      	b.n	8002f6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01c      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d108      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d030      	beq.n	8002efe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
 8002ea4:	e02b      	b.n	8002efe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d027      	beq.n	8002efe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
 8002eb6:	e022      	b.n	8002efe <HAL_DMA_IRQHandler+0x29e>
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0210 	bic.w	r2, r2, #16
 8002edc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d032      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d022      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2205      	movs	r2, #5
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d307      	bcc.n	8002f46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f2      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x2ca>
 8002f44:	e000      	b.n	8002f48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f46:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e000      	b.n	8002f6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f6a:	bf00      	nop
    }
  }
}
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop

08002f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d108      	bne.n	8002fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fb2:	e007      	b.n	8002fc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b10      	subs	r3, #16
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <DMA_CalcBaseAndBitshift+0x64>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <DMA_CalcBaseAndBitshift+0x68>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d909      	bls.n	8003012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	659a      	str	r2, [r3, #88]	; 0x58
 8003010:	e007      	b.n	8003022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	aaaaaaab 	.word	0xaaaaaaab
 8003038:	080051b0 	.word	0x080051b0

0800303c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11f      	bne.n	8003096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d855      	bhi.n	8003108 <DMA_CheckFifoParam+0xcc>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <DMA_CheckFifoParam+0x28>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003075 	.word	0x08003075
 8003068:	08003087 	.word	0x08003087
 800306c:	08003075 	.word	0x08003075
 8003070:	08003109 	.word	0x08003109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d045      	beq.n	800310c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e042      	b.n	800310c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800308e:	d13f      	bne.n	8003110 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003094:	e03c      	b.n	8003110 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309e:	d121      	bne.n	80030e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d836      	bhi.n	8003114 <DMA_CheckFifoParam+0xd8>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <DMA_CheckFifoParam+0x70>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c3 	.word	0x080030c3
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	080030d5 	.word	0x080030d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e02f      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d024      	beq.n	8003118 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d2:	e021      	b.n	8003118 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030dc:	d11e      	bne.n	800311c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e2:	e01b      	b.n	800311c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <DMA_CheckFifoParam+0xb4>
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d003      	beq.n	80030f6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030ee:	e018      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e015      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00e      	beq.n	8003120 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
      break;
 8003106:	e00b      	b.n	8003120 <DMA_CheckFifoParam+0xe4>
      break;
 8003108:	bf00      	nop
 800310a:	e00a      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 800310c:	bf00      	nop
 800310e:	e008      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 8003110:	bf00      	nop
 8003112:	e006      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 8003114:	bf00      	nop
 8003116:	e004      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 8003118:	bf00      	nop
 800311a:	e002      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;   
 800311c:	bf00      	nop
 800311e:	e000      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 8003120:	bf00      	nop
    }
  } 
  
  return status; 
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e159      	b.n	8003400 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800314c:	2201      	movs	r2, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	f040 8148 	bne.w	80033fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d00b      	beq.n	800318a <HAL_GPIO_Init+0x5a>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800317e:	2b11      	cmp	r3, #17
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b12      	cmp	r3, #18
 8003188:	d130      	bne.n	80031ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 0201 	and.w	r2, r3, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2203      	movs	r2, #3
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0xfc>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b12      	cmp	r3, #18
 800322a:	d123      	bne.n	8003274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	08da      	lsrs	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3208      	adds	r2, #8
 8003234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	220f      	movs	r2, #15
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	08da      	lsrs	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3208      	adds	r2, #8
 800326e:	69b9      	ldr	r1, [r7, #24]
 8003270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0203 	and.w	r2, r3, #3
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80a2 	beq.w	80033fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b56      	ldr	r3, [pc, #344]	; (8003414 <HAL_GPIO_Init+0x2e4>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	4a55      	ldr	r2, [pc, #340]	; (8003414 <HAL_GPIO_Init+0x2e4>)
 80032c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c4:	6453      	str	r3, [r2, #68]	; 0x44
 80032c6:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_GPIO_Init+0x2e4>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d2:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_GPIO_Init+0x2e8>)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a48      	ldr	r2, [pc, #288]	; (800341c <HAL_GPIO_Init+0x2ec>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d019      	beq.n	8003332 <HAL_GPIO_Init+0x202>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a47      	ldr	r2, [pc, #284]	; (8003420 <HAL_GPIO_Init+0x2f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_GPIO_Init+0x1fe>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a46      	ldr	r2, [pc, #280]	; (8003424 <HAL_GPIO_Init+0x2f4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00d      	beq.n	800332a <HAL_GPIO_Init+0x1fa>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a45      	ldr	r2, [pc, #276]	; (8003428 <HAL_GPIO_Init+0x2f8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <HAL_GPIO_Init+0x1f6>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a44      	ldr	r2, [pc, #272]	; (800342c <HAL_GPIO_Init+0x2fc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <HAL_GPIO_Init+0x1f2>
 800331e:	2304      	movs	r3, #4
 8003320:	e008      	b.n	8003334 <HAL_GPIO_Init+0x204>
 8003322:	2307      	movs	r3, #7
 8003324:	e006      	b.n	8003334 <HAL_GPIO_Init+0x204>
 8003326:	2303      	movs	r3, #3
 8003328:	e004      	b.n	8003334 <HAL_GPIO_Init+0x204>
 800332a:	2302      	movs	r3, #2
 800332c:	e002      	b.n	8003334 <HAL_GPIO_Init+0x204>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_GPIO_Init+0x204>
 8003332:	2300      	movs	r3, #0
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	f002 0203 	and.w	r2, r2, #3
 800333a:	0092      	lsls	r2, r2, #2
 800333c:	4093      	lsls	r3, r2
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003344:	4934      	ldr	r1, [pc, #208]	; (8003418 <HAL_GPIO_Init+0x2e8>)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	3302      	adds	r3, #2
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_GPIO_Init+0x300>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003376:	4a2e      	ldr	r2, [pc, #184]	; (8003430 <HAL_GPIO_Init+0x300>)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800337c:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <HAL_GPIO_Init+0x300>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a0:	4a23      	ldr	r2, [pc, #140]	; (8003430 <HAL_GPIO_Init+0x300>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_GPIO_Init+0x300>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ca:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_GPIO_Init+0x300>)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_GPIO_Init+0x300>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f4:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <HAL_GPIO_Init+0x300>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3301      	adds	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b0f      	cmp	r3, #15
 8003404:	f67f aea2 	bls.w	800314c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003408:	bf00      	nop
 800340a:	3724      	adds	r7, #36	; 0x24
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40023800 	.word	0x40023800
 8003418:	40013800 	.word	0x40013800
 800341c:	40020000 	.word	0x40020000
 8003420:	40020400 	.word	0x40020400
 8003424:	40020800 	.word	0x40020800
 8003428:	40020c00 	.word	0x40020c00
 800342c:	40021000 	.word	0x40021000
 8003430:	40013c00 	.word	0x40013c00

08003434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e25b      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d075      	beq.n	800353e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003452:	4ba3      	ldr	r3, [pc, #652]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b04      	cmp	r3, #4
 800345c:	d00c      	beq.n	8003478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345e:	4ba0      	ldr	r3, [pc, #640]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003466:	2b08      	cmp	r3, #8
 8003468:	d112      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4b9d      	ldr	r3, [pc, #628]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003476:	d10b      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	4b99      	ldr	r3, [pc, #612]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d05b      	beq.n	800353c <HAL_RCC_OscConfig+0x108>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d157      	bne.n	800353c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e236      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0x74>
 800349a:	4b91      	ldr	r3, [pc, #580]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a90      	ldr	r2, [pc, #576]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e01d      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x98>
 80034b2:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a8a      	ldr	r2, [pc, #552]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a87      	ldr	r2, [pc, #540]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034cc:	4b84      	ldr	r3, [pc, #528]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a83      	ldr	r2, [pc, #524]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7ff f972 	bl	80027d4 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f4:	f7ff f96e 	bl	80027d4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1fb      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	4b76      	ldr	r3, [pc, #472]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0xc0>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7ff f95e 	bl	80027d4 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351c:	f7ff f95a 	bl	80027d4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1e7      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0xe8>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d063      	beq.n	8003612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354a:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b62      	ldr	r3, [pc, #392]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355e:	2b08      	cmp	r3, #8
 8003560:	d11c      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003562:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d116      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	4b5c      	ldr	r3, [pc, #368]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e1bb      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4952      	ldr	r1, [pc, #328]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	e03a      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a4:	4b4f      	ldr	r3, [pc, #316]	; (80036e4 <HAL_RCC_OscConfig+0x2b0>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7ff f913 	bl	80027d4 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b2:	f7ff f90f 	bl	80027d4 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e19c      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4940      	ldr	r1, [pc, #256]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
 80035e4:	e015      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_OscConfig+0x2b0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7ff f8f2 	bl	80027d4 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f4:	f7ff f8ee 	bl	80027d4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e17b      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d030      	beq.n	8003680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003626:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_RCC_OscConfig+0x2b4>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7ff f8d2 	bl	80027d4 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003634:	f7ff f8ce 	bl	80027d4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e15b      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x200>
 8003652:	e015      	b.n	8003680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_OscConfig+0x2b4>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7ff f8bb 	bl	80027d4 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003662:	f7ff f8b7 	bl	80027d4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e144      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80a0 	beq.w	80037ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_OscConfig+0x2b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d121      	bne.n	800370e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_RCC_OscConfig+0x2b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_RCC_OscConfig+0x2b8>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7ff f87d 	bl	80027d4 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	e011      	b.n	8003702 <HAL_RCC_OscConfig+0x2ce>
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	42470000 	.word	0x42470000
 80036e8:	42470e80 	.word	0x42470e80
 80036ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f0:	f7ff f870 	bl	80027d4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0fd      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b81      	ldr	r3, [pc, #516]	; (8003908 <HAL_RCC_OscConfig+0x4d4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x2f0>
 8003716:	4b7d      	ldr	r3, [pc, #500]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a7c      	ldr	r2, [pc, #496]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	e01c      	b.n	800375e <HAL_RCC_OscConfig+0x32a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b05      	cmp	r3, #5
 800372a:	d10c      	bne.n	8003746 <HAL_RCC_OscConfig+0x312>
 800372c:	4b77      	ldr	r3, [pc, #476]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a76      	ldr	r2, [pc, #472]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	4b74      	ldr	r3, [pc, #464]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a73      	ldr	r2, [pc, #460]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	e00b      	b.n	800375e <HAL_RCC_OscConfig+0x32a>
 8003746:	4b71      	ldr	r3, [pc, #452]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a70      	ldr	r2, [pc, #448]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	4b6e      	ldr	r3, [pc, #440]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a6d      	ldr	r2, [pc, #436]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7ff f835 	bl	80027d4 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7ff f831 	bl	80027d4 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0bc      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	4b61      	ldr	r3, [pc, #388]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ee      	beq.n	800376e <HAL_RCC_OscConfig+0x33a>
 8003790:	e014      	b.n	80037bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003792:	f7ff f81f 	bl	80027d4 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7ff f81b 	bl	80027d4 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0a6      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	4b56      	ldr	r3, [pc, #344]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b52      	ldr	r3, [pc, #328]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a51      	ldr	r2, [pc, #324]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8092 	beq.w	80038fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d8:	4b4c      	ldr	r3, [pc, #304]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d05c      	beq.n	800389e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d141      	bne.n	8003870 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ec:	4b48      	ldr	r3, [pc, #288]	; (8003910 <HAL_RCC_OscConfig+0x4dc>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fe ffef 	bl	80027d4 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fe ffeb 	bl	80027d4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e078      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380c:	4b3f      	ldr	r3, [pc, #252]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	019b      	lsls	r3, r3, #6
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	061b      	lsls	r3, r3, #24
 800383c:	4933      	ldr	r1, [pc, #204]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003842:	4b33      	ldr	r3, [pc, #204]	; (8003910 <HAL_RCC_OscConfig+0x4dc>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fe ffc4 	bl	80027d4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003850:	f7fe ffc0 	bl	80027d4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e04d      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003862:	4b2a      	ldr	r3, [pc, #168]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x41c>
 800386e:	e045      	b.n	80038fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_OscConfig+0x4dc>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fe ffad 	bl	80027d4 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387e:	f7fe ffa9 	bl	80027d4 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e036      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003890:	4b1e      	ldr	r3, [pc, #120]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x44a>
 800389c:	e02e      	b.n	80038fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e029      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <HAL_RCC_OscConfig+0x4d8>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d11c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d115      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d2:	4013      	ands	r3, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d8:	4293      	cmp	r3, r2
 80038da:	d10d      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d106      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40007000 	.word	0x40007000
 800390c:	40023800 	.word	0x40023800
 8003910:	42470060 	.word	0x42470060

08003914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0cc      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b68      	ldr	r3, [pc, #416]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d90c      	bls.n	8003950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a52      	ldr	r2, [pc, #328]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d044      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d119      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d003      	beq.n	80039d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e067      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4934      	ldr	r1, [pc, #208]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fe fee6 	bl	80027d4 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe fee2 	bl	80027d4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e04f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d20c      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f821 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	5cd3      	ldrb	r3, [r2, r3]
 8003aae:	fa21 f303 	lsr.w	r3, r1, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fe46 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	08005198 	.word	0x08005198
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	20000004 	.word	0x20000004

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	2300      	movs	r3, #0
 8003af0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af6:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d007      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x32>
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d008      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x38>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 808d 	bne.w	8003c26 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b0c:	4b4b      	ldr	r3, [pc, #300]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b0e:	60bb      	str	r3, [r7, #8]
       break;
 8003b10:	e08c      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b12:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b14:	60bb      	str	r3, [r7, #8]
      break;
 8003b16:	e089      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b18:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b22:	4b45      	ldr	r3, [pc, #276]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d023      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2e:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	ea03 0501 	and.w	r5, r3, r1
 8003b44:	ea04 0602 	and.w	r6, r4, r2
 8003b48:	4a3d      	ldr	r2, [pc, #244]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b4a:	fb02 f106 	mul.w	r1, r2, r6
 8003b4e:	2200      	movs	r2, #0
 8003b50:	fb02 f205 	mul.w	r2, r2, r5
 8003b54:	440a      	add	r2, r1
 8003b56:	493a      	ldr	r1, [pc, #232]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b58:	fba5 0101 	umull	r0, r1, r5, r1
 8003b5c:	1853      	adds	r3, r2, r1
 8003b5e:	4619      	mov	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f04f 0400 	mov.w	r4, #0
 8003b66:	461a      	mov	r2, r3
 8003b68:	4623      	mov	r3, r4
 8003b6a:	f7fc fb3d 	bl	80001e8 <__aeabi_uldivmod>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e049      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b76:	4b30      	ldr	r3, [pc, #192]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	099b      	lsrs	r3, r3, #6
 8003b7c:	f04f 0400 	mov.w	r4, #0
 8003b80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	ea03 0501 	and.w	r5, r3, r1
 8003b8c:	ea04 0602 	and.w	r6, r4, r2
 8003b90:	4629      	mov	r1, r5
 8003b92:	4632      	mov	r2, r6
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	f04f 0400 	mov.w	r4, #0
 8003b9c:	0154      	lsls	r4, r2, #5
 8003b9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ba2:	014b      	lsls	r3, r1, #5
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	1b49      	subs	r1, r1, r5
 8003baa:	eb62 0206 	sbc.w	r2, r2, r6
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	f04f 0400 	mov.w	r4, #0
 8003bb6:	0194      	lsls	r4, r2, #6
 8003bb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bbc:	018b      	lsls	r3, r1, #6
 8003bbe:	1a5b      	subs	r3, r3, r1
 8003bc0:	eb64 0402 	sbc.w	r4, r4, r2
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	00e2      	lsls	r2, r4, #3
 8003bce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bd2:	00d9      	lsls	r1, r3, #3
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4614      	mov	r4, r2
 8003bd8:	195b      	adds	r3, r3, r5
 8003bda:	eb44 0406 	adc.w	r4, r4, r6
 8003bde:	f04f 0100 	mov.w	r1, #0
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	02a2      	lsls	r2, r4, #10
 8003be8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003bec:	0299      	lsls	r1, r3, #10
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4614      	mov	r4, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f04f 0400 	mov.w	r4, #0
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	f7fc faf2 	bl	80001e8 <__aeabi_uldivmod>
 8003c04:	4603      	mov	r3, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	0c1b      	lsrs	r3, r3, #16
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	3301      	adds	r3, #1
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	60bb      	str	r3, [r7, #8]
      break;
 8003c24:	e002      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c28:	60bb      	str	r3, [r7, #8]
      break;
 8003c2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	00f42400 	.word	0x00f42400
 8003c40:	017d7840 	.word	0x017d7840

08003c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c48:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000000 	.word	0x20000000

08003c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c60:	f7ff fff0 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8003c64:	4601      	mov	r1, r0
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	0a9b      	lsrs	r3, r3, #10
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	4a03      	ldr	r2, [pc, #12]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c72:	5cd3      	ldrb	r3, [r2, r3]
 8003c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	080051a8 	.word	0x080051a8

08003c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c88:	f7ff ffdc 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8003c8c:	4601      	mov	r1, r0
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	0b5b      	lsrs	r3, r3, #13
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4a03      	ldr	r2, [pc, #12]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9a:	5cd3      	ldrb	r3, [r2, r3]
 8003c9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	080051a8 	.word	0x080051a8

08003cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e03f      	b.n	8003d3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fe fb56 	bl	8002384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	; 0x24
 8003cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fc2d 	bl	8004550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	4613      	mov	r3, r2
 8003d54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d153      	bne.n	8003e0a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_UART_Transmit_DMA+0x26>
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e04c      	b.n	8003e0c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_UART_Transmit_DMA+0x38>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e045      	b.n	8003e0c <HAL_UART_Transmit_DMA+0xc4>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	88fa      	ldrh	r2, [r7, #6]
 8003d92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	88fa      	ldrh	r2, [r7, #6]
 8003d98:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2221      	movs	r2, #33	; 0x21
 8003da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <HAL_UART_Transmit_DMA+0xcc>)
 8003dae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_UART_Transmit_DMA+0xd0>)
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <HAL_UART_Transmit_DMA+0xd4>)
 8003dbe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003dc8:	f107 0308 	add.w	r3, r7, #8
 8003dcc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	461a      	mov	r2, r3
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	f7fe fec4 	bl	8002b6c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e04:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	0800415d 	.word	0x0800415d
 8003e18:	080041af 	.word	0x080041af
 8003e1c:	0800424f 	.word	0x0800424f

08003e20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d166      	bne.n	8003f08 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_UART_Receive_DMA+0x26>
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e05f      	b.n	8003f0a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_UART_Receive_DMA+0x38>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e058      	b.n	8003f0a <HAL_UART_Receive_DMA+0xea>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	88fa      	ldrh	r2, [r7, #6]
 8003e6a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2222      	movs	r2, #34	; 0x22
 8003e76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <HAL_UART_Receive_DMA+0xf4>)
 8003e80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	4a24      	ldr	r2, [pc, #144]	; (8003f18 <HAL_UART_Receive_DMA+0xf8>)
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_UART_Receive_DMA+0xfc>)
 8003e90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	2200      	movs	r2, #0
 8003e98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003e9a:	f107 0308 	add.w	r3, r7, #8
 8003e9e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	f7fe fe5b 	bl	8002b6c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f02:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e000      	b.n	8003f0a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	080041cb 	.word	0x080041cb
 8003f18:	08004233 	.word	0x08004233
 8003f1c:	0800424f 	.word	0x0800424f

08003f20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_UART_IRQHandler+0x52>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fa6f 	bl	800444e <UART_Receive_IT>
      return;
 8003f70:	e0d1      	b.n	8004116 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80b0 	beq.w	80040da <HAL_UART_IRQHandler+0x1ba>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <HAL_UART_IRQHandler+0x70>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80a5 	beq.w	80040da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x90>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	f043 0201 	orr.w	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_UART_IRQHandler+0xb0>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	f043 0202 	orr.w	r2, r3, #2
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_UART_IRQHandler+0xd0>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	f043 0204 	orr.w	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00f      	beq.n	800401a <HAL_UART_IRQHandler+0xfa>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <HAL_UART_IRQHandler+0xee>
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	f043 0208 	orr.w	r2, r3, #8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d078      	beq.n	8004114 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_UART_IRQHandler+0x11c>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa09 	bl	800444e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <HAL_UART_IRQHandler+0x144>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d031      	beq.n	80040c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f952 	bl	800430e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d123      	bne.n	80040c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d013      	beq.n	80040b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	4a21      	ldr	r2, [pc, #132]	; (800411c <HAL_UART_IRQHandler+0x1fc>)
 8004096:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fdbd 	bl	8002c1c <HAL_DMA_Abort_IT>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d016      	beq.n	80040d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040b2:	4610      	mov	r0, r2
 80040b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b6:	e00e      	b.n	80040d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f845 	bl	8004148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040be:	e00a      	b.n	80040d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f841 	bl	8004148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c6:	e006      	b.n	80040d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f83d 	bl	8004148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80040d4:	e01e      	b.n	8004114 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d6:	bf00      	nop
    return;
 80040d8:	e01c      	b.n	8004114 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_UART_IRQHandler+0x1d6>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f93f 	bl	8004372 <UART_Transmit_IT>
    return;
 80040f4:	e00f      	b.n	8004116 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_UART_IRQHandler+0x1f6>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f987 	bl	800441e <UART_EndTransmit_IT>
    return;
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004114:	bf00      	nop
  }
}
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	0800434b 	.word	0x0800434b

08004120 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d113      	bne.n	80041a0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800418c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800419e:	e002      	b.n	80041a6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f7fd fb6f 	bl	8001884 <HAL_UART_TxCpltCallback>
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ffaf 	bl	8004120 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11e      	bne.n	8004224 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041fa:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7fd fb3f 	bl	80018a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7ff ff77 	bl	8004134 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b80      	cmp	r3, #128	; 0x80
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b21      	cmp	r3, #33	; 0x21
 8004280:	d108      	bne.n	8004294 <UART_DMAError+0x46>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2200      	movs	r2, #0
 800428c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	f000 f827 	bl	80042e2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b40      	cmp	r3, #64	; 0x40
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b22      	cmp	r3, #34	; 0x22
 80042b4:	d108      	bne.n	80042c8 <UART_DMAError+0x7a>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042c2:	68b8      	ldr	r0, [r7, #8]
 80042c4:	f000 f823 	bl	800430e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	f043 0210 	orr.w	r2, r3, #16
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d4:	68b8      	ldr	r0, [r7, #8]
 80042d6:	f7ff ff37 	bl	8004148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80042f8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004324:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff feef 	bl	8004148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004372:	b480      	push	{r7}
 8004374:	b085      	sub	sp, #20
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b21      	cmp	r3, #33	; 0x21
 8004384:	d144      	bne.n	8004410 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438e:	d11a      	bne.n	80043c6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	621a      	str	r2, [r3, #32]
 80043b8:	e00e      	b.n	80043d8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]
 80043c4:	e008      	b.n	80043d8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6211      	str	r1, [r2, #32]
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4619      	mov	r1, r3
 80043e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10f      	bne.n	800440c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800440a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	e000      	b.n	8004412 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004410:	2302      	movs	r3, #2
  }
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004434:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd fa20 	bl	8001884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b22      	cmp	r3, #34	; 0x22
 8004460:	d171      	bne.n	8004546 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d123      	bne.n	80044b4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10e      	bne.n	8004498 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	1c9a      	adds	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	629a      	str	r2, [r3, #40]	; 0x28
 8004496:	e029      	b.n	80044ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28
 80044b2:	e01b      	b.n	80044ec <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6858      	ldr	r0, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	1c59      	adds	r1, r3, #1
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6291      	str	r1, [r2, #40]	; 0x28
 80044cc:	b2c2      	uxtb	r2, r0
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e00c      	b.n	80044ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	1c58      	adds	r0, r3, #1
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	6288      	str	r0, [r1, #40]	; 0x28
 80044e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4619      	mov	r1, r3
 80044fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d120      	bne.n	8004542 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0220 	bic.w	r2, r2, #32
 800450e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7fd f9b5 	bl	80018a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e002      	b.n	8004548 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004546:	2302      	movs	r3, #2
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004592:	f023 030c 	bic.w	r3, r3, #12
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	430b      	orrs	r3, r1
 800459e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045be:	f040 818b 	bne.w	80048d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4ac1      	ldr	r2, [pc, #772]	; (80048cc <UART_SetConfig+0x37c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d005      	beq.n	80045d8 <UART_SetConfig+0x88>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4abf      	ldr	r2, [pc, #764]	; (80048d0 <UART_SetConfig+0x380>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	f040 80bd 	bne.w	8004752 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045d8:	f7ff fb54 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 80045dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	461d      	mov	r5, r3
 80045e2:	f04f 0600 	mov.w	r6, #0
 80045e6:	46a8      	mov	r8, r5
 80045e8:	46b1      	mov	r9, r6
 80045ea:	eb18 0308 	adds.w	r3, r8, r8
 80045ee:	eb49 0409 	adc.w	r4, r9, r9
 80045f2:	4698      	mov	r8, r3
 80045f4:	46a1      	mov	r9, r4
 80045f6:	eb18 0805 	adds.w	r8, r8, r5
 80045fa:	eb49 0906 	adc.w	r9, r9, r6
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800460a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800460e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004612:	4688      	mov	r8, r1
 8004614:	4691      	mov	r9, r2
 8004616:	eb18 0005 	adds.w	r0, r8, r5
 800461a:	eb49 0106 	adc.w	r1, r9, r6
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	461d      	mov	r5, r3
 8004624:	f04f 0600 	mov.w	r6, #0
 8004628:	196b      	adds	r3, r5, r5
 800462a:	eb46 0406 	adc.w	r4, r6, r6
 800462e:	461a      	mov	r2, r3
 8004630:	4623      	mov	r3, r4
 8004632:	f7fb fdd9 	bl	80001e8 <__aeabi_uldivmod>
 8004636:	4603      	mov	r3, r0
 8004638:	460c      	mov	r4, r1
 800463a:	461a      	mov	r2, r3
 800463c:	4ba5      	ldr	r3, [pc, #660]	; (80048d4 <UART_SetConfig+0x384>)
 800463e:	fba3 2302 	umull	r2, r3, r3, r2
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	461d      	mov	r5, r3
 800464c:	f04f 0600 	mov.w	r6, #0
 8004650:	46a9      	mov	r9, r5
 8004652:	46b2      	mov	sl, r6
 8004654:	eb19 0309 	adds.w	r3, r9, r9
 8004658:	eb4a 040a 	adc.w	r4, sl, sl
 800465c:	4699      	mov	r9, r3
 800465e:	46a2      	mov	sl, r4
 8004660:	eb19 0905 	adds.w	r9, r9, r5
 8004664:	eb4a 0a06 	adc.w	sl, sl, r6
 8004668:	f04f 0100 	mov.w	r1, #0
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004674:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004678:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800467c:	4689      	mov	r9, r1
 800467e:	4692      	mov	sl, r2
 8004680:	eb19 0005 	adds.w	r0, r9, r5
 8004684:	eb4a 0106 	adc.w	r1, sl, r6
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	461d      	mov	r5, r3
 800468e:	f04f 0600 	mov.w	r6, #0
 8004692:	196b      	adds	r3, r5, r5
 8004694:	eb46 0406 	adc.w	r4, r6, r6
 8004698:	461a      	mov	r2, r3
 800469a:	4623      	mov	r3, r4
 800469c:	f7fb fda4 	bl	80001e8 <__aeabi_uldivmod>
 80046a0:	4603      	mov	r3, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b8b      	ldr	r3, [pc, #556]	; (80048d4 <UART_SetConfig+0x384>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	2164      	movs	r1, #100	; 0x64
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	3332      	adds	r3, #50	; 0x32
 80046ba:	4a86      	ldr	r2, [pc, #536]	; (80048d4 <UART_SetConfig+0x384>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046c8:	4498      	add	r8, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	461d      	mov	r5, r3
 80046ce:	f04f 0600 	mov.w	r6, #0
 80046d2:	46a9      	mov	r9, r5
 80046d4:	46b2      	mov	sl, r6
 80046d6:	eb19 0309 	adds.w	r3, r9, r9
 80046da:	eb4a 040a 	adc.w	r4, sl, sl
 80046de:	4699      	mov	r9, r3
 80046e0:	46a2      	mov	sl, r4
 80046e2:	eb19 0905 	adds.w	r9, r9, r5
 80046e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046fe:	4689      	mov	r9, r1
 8004700:	4692      	mov	sl, r2
 8004702:	eb19 0005 	adds.w	r0, r9, r5
 8004706:	eb4a 0106 	adc.w	r1, sl, r6
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	461d      	mov	r5, r3
 8004710:	f04f 0600 	mov.w	r6, #0
 8004714:	196b      	adds	r3, r5, r5
 8004716:	eb46 0406 	adc.w	r4, r6, r6
 800471a:	461a      	mov	r2, r3
 800471c:	4623      	mov	r3, r4
 800471e:	f7fb fd63 	bl	80001e8 <__aeabi_uldivmod>
 8004722:	4603      	mov	r3, r0
 8004724:	460c      	mov	r4, r1
 8004726:	461a      	mov	r2, r3
 8004728:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <UART_SetConfig+0x384>)
 800472a:	fba3 1302 	umull	r1, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2164      	movs	r1, #100	; 0x64
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	3332      	adds	r3, #50	; 0x32
 800473c:	4a65      	ldr	r2, [pc, #404]	; (80048d4 <UART_SetConfig+0x384>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	f003 0207 	and.w	r2, r3, #7
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4442      	add	r2, r8
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	e26f      	b.n	8004c32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004752:	f7ff fa83 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8004756:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	461d      	mov	r5, r3
 800475c:	f04f 0600 	mov.w	r6, #0
 8004760:	46a8      	mov	r8, r5
 8004762:	46b1      	mov	r9, r6
 8004764:	eb18 0308 	adds.w	r3, r8, r8
 8004768:	eb49 0409 	adc.w	r4, r9, r9
 800476c:	4698      	mov	r8, r3
 800476e:	46a1      	mov	r9, r4
 8004770:	eb18 0805 	adds.w	r8, r8, r5
 8004774:	eb49 0906 	adc.w	r9, r9, r6
 8004778:	f04f 0100 	mov.w	r1, #0
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004784:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004788:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800478c:	4688      	mov	r8, r1
 800478e:	4691      	mov	r9, r2
 8004790:	eb18 0005 	adds.w	r0, r8, r5
 8004794:	eb49 0106 	adc.w	r1, r9, r6
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	461d      	mov	r5, r3
 800479e:	f04f 0600 	mov.w	r6, #0
 80047a2:	196b      	adds	r3, r5, r5
 80047a4:	eb46 0406 	adc.w	r4, r6, r6
 80047a8:	461a      	mov	r2, r3
 80047aa:	4623      	mov	r3, r4
 80047ac:	f7fb fd1c 	bl	80001e8 <__aeabi_uldivmod>
 80047b0:	4603      	mov	r3, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <UART_SetConfig+0x384>)
 80047b8:	fba3 2302 	umull	r2, r3, r3, r2
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	461d      	mov	r5, r3
 80047c6:	f04f 0600 	mov.w	r6, #0
 80047ca:	46a9      	mov	r9, r5
 80047cc:	46b2      	mov	sl, r6
 80047ce:	eb19 0309 	adds.w	r3, r9, r9
 80047d2:	eb4a 040a 	adc.w	r4, sl, sl
 80047d6:	4699      	mov	r9, r3
 80047d8:	46a2      	mov	sl, r4
 80047da:	eb19 0905 	adds.w	r9, r9, r5
 80047de:	eb4a 0a06 	adc.w	sl, sl, r6
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047f6:	4689      	mov	r9, r1
 80047f8:	4692      	mov	sl, r2
 80047fa:	eb19 0005 	adds.w	r0, r9, r5
 80047fe:	eb4a 0106 	adc.w	r1, sl, r6
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	461d      	mov	r5, r3
 8004808:	f04f 0600 	mov.w	r6, #0
 800480c:	196b      	adds	r3, r5, r5
 800480e:	eb46 0406 	adc.w	r4, r6, r6
 8004812:	461a      	mov	r2, r3
 8004814:	4623      	mov	r3, r4
 8004816:	f7fb fce7 	bl	80001e8 <__aeabi_uldivmod>
 800481a:	4603      	mov	r3, r0
 800481c:	460c      	mov	r4, r1
 800481e:	461a      	mov	r2, r3
 8004820:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <UART_SetConfig+0x384>)
 8004822:	fba3 1302 	umull	r1, r3, r3, r2
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	2164      	movs	r1, #100	; 0x64
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	3332      	adds	r3, #50	; 0x32
 8004834:	4a27      	ldr	r2, [pc, #156]	; (80048d4 <UART_SetConfig+0x384>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004842:	4498      	add	r8, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	461d      	mov	r5, r3
 8004848:	f04f 0600 	mov.w	r6, #0
 800484c:	46a9      	mov	r9, r5
 800484e:	46b2      	mov	sl, r6
 8004850:	eb19 0309 	adds.w	r3, r9, r9
 8004854:	eb4a 040a 	adc.w	r4, sl, sl
 8004858:	4699      	mov	r9, r3
 800485a:	46a2      	mov	sl, r4
 800485c:	eb19 0905 	adds.w	r9, r9, r5
 8004860:	eb4a 0a06 	adc.w	sl, sl, r6
 8004864:	f04f 0100 	mov.w	r1, #0
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004870:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004874:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004878:	4689      	mov	r9, r1
 800487a:	4692      	mov	sl, r2
 800487c:	eb19 0005 	adds.w	r0, r9, r5
 8004880:	eb4a 0106 	adc.w	r1, sl, r6
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	461d      	mov	r5, r3
 800488a:	f04f 0600 	mov.w	r6, #0
 800488e:	196b      	adds	r3, r5, r5
 8004890:	eb46 0406 	adc.w	r4, r6, r6
 8004894:	461a      	mov	r2, r3
 8004896:	4623      	mov	r3, r4
 8004898:	f7fb fca6 	bl	80001e8 <__aeabi_uldivmod>
 800489c:	4603      	mov	r3, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <UART_SetConfig+0x384>)
 80048a4:	fba3 1302 	umull	r1, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	2164      	movs	r1, #100	; 0x64
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	3332      	adds	r3, #50	; 0x32
 80048b6:	4a07      	ldr	r2, [pc, #28]	; (80048d4 <UART_SetConfig+0x384>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	f003 0207 	and.w	r2, r3, #7
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4442      	add	r2, r8
 80048c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80048ca:	e1b2      	b.n	8004c32 <UART_SetConfig+0x6e2>
 80048cc:	40011000 	.word	0x40011000
 80048d0:	40011400 	.word	0x40011400
 80048d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4ad7      	ldr	r2, [pc, #860]	; (8004c3c <UART_SetConfig+0x6ec>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d005      	beq.n	80048ee <UART_SetConfig+0x39e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4ad6      	ldr	r2, [pc, #856]	; (8004c40 <UART_SetConfig+0x6f0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	f040 80d1 	bne.w	8004a90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80048ee:	f7ff f9c9 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 80048f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	469a      	mov	sl, r3
 80048f8:	f04f 0b00 	mov.w	fp, #0
 80048fc:	46d0      	mov	r8, sl
 80048fe:	46d9      	mov	r9, fp
 8004900:	eb18 0308 	adds.w	r3, r8, r8
 8004904:	eb49 0409 	adc.w	r4, r9, r9
 8004908:	4698      	mov	r8, r3
 800490a:	46a1      	mov	r9, r4
 800490c:	eb18 080a 	adds.w	r8, r8, sl
 8004910:	eb49 090b 	adc.w	r9, r9, fp
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004920:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004924:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004928:	4688      	mov	r8, r1
 800492a:	4691      	mov	r9, r2
 800492c:	eb1a 0508 	adds.w	r5, sl, r8
 8004930:	eb4b 0609 	adc.w	r6, fp, r9
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4619      	mov	r1, r3
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	f04f 0400 	mov.w	r4, #0
 8004946:	0094      	lsls	r4, r2, #2
 8004948:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800494c:	008b      	lsls	r3, r1, #2
 800494e:	461a      	mov	r2, r3
 8004950:	4623      	mov	r3, r4
 8004952:	4628      	mov	r0, r5
 8004954:	4631      	mov	r1, r6
 8004956:	f7fb fc47 	bl	80001e8 <__aeabi_uldivmod>
 800495a:	4603      	mov	r3, r0
 800495c:	460c      	mov	r4, r1
 800495e:	461a      	mov	r2, r3
 8004960:	4bb8      	ldr	r3, [pc, #736]	; (8004c44 <UART_SetConfig+0x6f4>)
 8004962:	fba3 2302 	umull	r2, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	469b      	mov	fp, r3
 8004970:	f04f 0c00 	mov.w	ip, #0
 8004974:	46d9      	mov	r9, fp
 8004976:	46e2      	mov	sl, ip
 8004978:	eb19 0309 	adds.w	r3, r9, r9
 800497c:	eb4a 040a 	adc.w	r4, sl, sl
 8004980:	4699      	mov	r9, r3
 8004982:	46a2      	mov	sl, r4
 8004984:	eb19 090b 	adds.w	r9, r9, fp
 8004988:	eb4a 0a0c 	adc.w	sl, sl, ip
 800498c:	f04f 0100 	mov.w	r1, #0
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004998:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800499c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049a0:	4689      	mov	r9, r1
 80049a2:	4692      	mov	sl, r2
 80049a4:	eb1b 0509 	adds.w	r5, fp, r9
 80049a8:	eb4c 060a 	adc.w	r6, ip, sl
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4619      	mov	r1, r3
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	f04f 0400 	mov.w	r4, #0
 80049be:	0094      	lsls	r4, r2, #2
 80049c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049c4:	008b      	lsls	r3, r1, #2
 80049c6:	461a      	mov	r2, r3
 80049c8:	4623      	mov	r3, r4
 80049ca:	4628      	mov	r0, r5
 80049cc:	4631      	mov	r1, r6
 80049ce:	f7fb fc0b 	bl	80001e8 <__aeabi_uldivmod>
 80049d2:	4603      	mov	r3, r0
 80049d4:	460c      	mov	r4, r1
 80049d6:	461a      	mov	r2, r3
 80049d8:	4b9a      	ldr	r3, [pc, #616]	; (8004c44 <UART_SetConfig+0x6f4>)
 80049da:	fba3 1302 	umull	r1, r3, r3, r2
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	2164      	movs	r1, #100	; 0x64
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	3332      	adds	r3, #50	; 0x32
 80049ec:	4a95      	ldr	r2, [pc, #596]	; (8004c44 <UART_SetConfig+0x6f4>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f8:	4498      	add	r8, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	469b      	mov	fp, r3
 80049fe:	f04f 0c00 	mov.w	ip, #0
 8004a02:	46d9      	mov	r9, fp
 8004a04:	46e2      	mov	sl, ip
 8004a06:	eb19 0309 	adds.w	r3, r9, r9
 8004a0a:	eb4a 040a 	adc.w	r4, sl, sl
 8004a0e:	4699      	mov	r9, r3
 8004a10:	46a2      	mov	sl, r4
 8004a12:	eb19 090b 	adds.w	r9, r9, fp
 8004a16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a2e:	4689      	mov	r9, r1
 8004a30:	4692      	mov	sl, r2
 8004a32:	eb1b 0509 	adds.w	r5, fp, r9
 8004a36:	eb4c 060a 	adc.w	r6, ip, sl
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	f04f 0400 	mov.w	r4, #0
 8004a4c:	0094      	lsls	r4, r2, #2
 8004a4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a52:	008b      	lsls	r3, r1, #2
 8004a54:	461a      	mov	r2, r3
 8004a56:	4623      	mov	r3, r4
 8004a58:	4628      	mov	r0, r5
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	f7fb fbc4 	bl	80001e8 <__aeabi_uldivmod>
 8004a60:	4603      	mov	r3, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	461a      	mov	r2, r3
 8004a66:	4b77      	ldr	r3, [pc, #476]	; (8004c44 <UART_SetConfig+0x6f4>)
 8004a68:	fba3 1302 	umull	r1, r3, r3, r2
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	2164      	movs	r1, #100	; 0x64
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	3332      	adds	r3, #50	; 0x32
 8004a7a:	4a72      	ldr	r2, [pc, #456]	; (8004c44 <UART_SetConfig+0x6f4>)
 8004a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	f003 020f 	and.w	r2, r3, #15
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4442      	add	r2, r8
 8004a8c:	609a      	str	r2, [r3, #8]
 8004a8e:	e0d0      	b.n	8004c32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a90:	f7ff f8e4 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8004a94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	469a      	mov	sl, r3
 8004a9a:	f04f 0b00 	mov.w	fp, #0
 8004a9e:	46d0      	mov	r8, sl
 8004aa0:	46d9      	mov	r9, fp
 8004aa2:	eb18 0308 	adds.w	r3, r8, r8
 8004aa6:	eb49 0409 	adc.w	r4, r9, r9
 8004aaa:	4698      	mov	r8, r3
 8004aac:	46a1      	mov	r9, r4
 8004aae:	eb18 080a 	adds.w	r8, r8, sl
 8004ab2:	eb49 090b 	adc.w	r9, r9, fp
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ac2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ac6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004aca:	4688      	mov	r8, r1
 8004acc:	4691      	mov	r9, r2
 8004ace:	eb1a 0508 	adds.w	r5, sl, r8
 8004ad2:	eb4b 0609 	adc.w	r6, fp, r9
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4619      	mov	r1, r3
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	f04f 0400 	mov.w	r4, #0
 8004ae8:	0094      	lsls	r4, r2, #2
 8004aea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004aee:	008b      	lsls	r3, r1, #2
 8004af0:	461a      	mov	r2, r3
 8004af2:	4623      	mov	r3, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	4631      	mov	r1, r6
 8004af8:	f7fb fb76 	bl	80001e8 <__aeabi_uldivmod>
 8004afc:	4603      	mov	r3, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <UART_SetConfig+0x6f4>)
 8004b04:	fba3 2302 	umull	r2, r3, r3, r2
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	469b      	mov	fp, r3
 8004b12:	f04f 0c00 	mov.w	ip, #0
 8004b16:	46d9      	mov	r9, fp
 8004b18:	46e2      	mov	sl, ip
 8004b1a:	eb19 0309 	adds.w	r3, r9, r9
 8004b1e:	eb4a 040a 	adc.w	r4, sl, sl
 8004b22:	4699      	mov	r9, r3
 8004b24:	46a2      	mov	sl, r4
 8004b26:	eb19 090b 	adds.w	r9, r9, fp
 8004b2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b42:	4689      	mov	r9, r1
 8004b44:	4692      	mov	sl, r2
 8004b46:	eb1b 0509 	adds.w	r5, fp, r9
 8004b4a:	eb4c 060a 	adc.w	r6, ip, sl
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	4619      	mov	r1, r3
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	f04f 0400 	mov.w	r4, #0
 8004b60:	0094      	lsls	r4, r2, #2
 8004b62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b66:	008b      	lsls	r3, r1, #2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	4631      	mov	r1, r6
 8004b70:	f7fb fb3a 	bl	80001e8 <__aeabi_uldivmod>
 8004b74:	4603      	mov	r3, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4b32      	ldr	r3, [pc, #200]	; (8004c44 <UART_SetConfig+0x6f4>)
 8004b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	2164      	movs	r1, #100	; 0x64
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	3332      	adds	r3, #50	; 0x32
 8004b8e:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <UART_SetConfig+0x6f4>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b9a:	4498      	add	r8, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	469b      	mov	fp, r3
 8004ba0:	f04f 0c00 	mov.w	ip, #0
 8004ba4:	46d9      	mov	r9, fp
 8004ba6:	46e2      	mov	sl, ip
 8004ba8:	eb19 0309 	adds.w	r3, r9, r9
 8004bac:	eb4a 040a 	adc.w	r4, sl, sl
 8004bb0:	4699      	mov	r9, r3
 8004bb2:	46a2      	mov	sl, r4
 8004bb4:	eb19 090b 	adds.w	r9, r9, fp
 8004bb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bbc:	f04f 0100 	mov.w	r1, #0
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bd0:	4689      	mov	r9, r1
 8004bd2:	4692      	mov	sl, r2
 8004bd4:	eb1b 0509 	adds.w	r5, fp, r9
 8004bd8:	eb4c 060a 	adc.w	r6, ip, sl
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4619      	mov	r1, r3
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	f04f 0400 	mov.w	r4, #0
 8004bee:	0094      	lsls	r4, r2, #2
 8004bf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bf4:	008b      	lsls	r3, r1, #2
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	f7fb faf3 	bl	80001e8 <__aeabi_uldivmod>
 8004c02:	4603      	mov	r3, r0
 8004c04:	460c      	mov	r4, r1
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <UART_SetConfig+0x6f4>)
 8004c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2164      	movs	r1, #100	; 0x64
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	3332      	adds	r3, #50	; 0x32
 8004c1c:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <UART_SetConfig+0x6f4>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4442      	add	r2, r8
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	e7ff      	b.n	8004c32 <UART_SetConfig+0x6e2>
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3c:	40011000 	.word	0x40011000
 8004c40:	40011400 	.word	0x40011400
 8004c44:	51eb851f 	.word	0x51eb851f

08004c48 <__cxa_pure_virtual>:
 8004c48:	b508      	push	{r3, lr}
 8004c4a:	f000 f80d 	bl	8004c68 <_ZSt9terminatev>

08004c4e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004c4e:	b508      	push	{r3, lr}
 8004c50:	4780      	blx	r0
 8004c52:	f000 f80e 	bl	8004c72 <abort>
	...

08004c58 <_ZSt13get_terminatev>:
 8004c58:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <_ZSt13get_terminatev+0xc>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	f3bf 8f5b 	dmb	ish
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c

08004c68 <_ZSt9terminatev>:
 8004c68:	b508      	push	{r3, lr}
 8004c6a:	f7ff fff5 	bl	8004c58 <_ZSt13get_terminatev>
 8004c6e:	f7ff ffee 	bl	8004c4e <_ZN10__cxxabiv111__terminateEPFvvE>

08004c72 <abort>:
 8004c72:	b508      	push	{r3, lr}
 8004c74:	2006      	movs	r0, #6
 8004c76:	f000 f871 	bl	8004d5c <raise>
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	f7fd fc98 	bl	80025b0 <_exit>

08004c80 <__errno>:
 8004c80:	4b01      	ldr	r3, [pc, #4]	; (8004c88 <__errno+0x8>)
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000010 	.word	0x20000010

08004c8c <__libc_init_array>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4e0d      	ldr	r6, [pc, #52]	; (8004cc4 <__libc_init_array+0x38>)
 8004c90:	4c0d      	ldr	r4, [pc, #52]	; (8004cc8 <__libc_init_array+0x3c>)
 8004c92:	1ba4      	subs	r4, r4, r6
 8004c94:	10a4      	asrs	r4, r4, #2
 8004c96:	2500      	movs	r5, #0
 8004c98:	42a5      	cmp	r5, r4
 8004c9a:	d109      	bne.n	8004cb0 <__libc_init_array+0x24>
 8004c9c:	4e0b      	ldr	r6, [pc, #44]	; (8004ccc <__libc_init_array+0x40>)
 8004c9e:	4c0c      	ldr	r4, [pc, #48]	; (8004cd0 <__libc_init_array+0x44>)
 8004ca0:	f000 f960 	bl	8004f64 <_init>
 8004ca4:	1ba4      	subs	r4, r4, r6
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	2500      	movs	r5, #0
 8004caa:	42a5      	cmp	r5, r4
 8004cac:	d105      	bne.n	8004cba <__libc_init_array+0x2e>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cb4:	4798      	blx	r3
 8004cb6:	3501      	adds	r5, #1
 8004cb8:	e7ee      	b.n	8004c98 <__libc_init_array+0xc>
 8004cba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cbe:	4798      	blx	r3
 8004cc0:	3501      	adds	r5, #1
 8004cc2:	e7f2      	b.n	8004caa <__libc_init_array+0x1e>
 8004cc4:	080051c0 	.word	0x080051c0
 8004cc8:	080051c0 	.word	0x080051c0
 8004ccc:	080051c0 	.word	0x080051c0
 8004cd0:	080051c8 	.word	0x080051c8

08004cd4 <memcpy>:
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	1e43      	subs	r3, r0, #1
 8004cd8:	440a      	add	r2, r1
 8004cda:	4291      	cmp	r1, r2
 8004cdc:	d100      	bne.n	8004ce0 <memcpy+0xc>
 8004cde:	bd10      	pop	{r4, pc}
 8004ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce8:	e7f7      	b.n	8004cda <memcpy+0x6>

08004cea <memset>:
 8004cea:	4402      	add	r2, r0
 8004cec:	4603      	mov	r3, r0
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d100      	bne.n	8004cf4 <memset+0xa>
 8004cf2:	4770      	bx	lr
 8004cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf8:	e7f9      	b.n	8004cee <memset+0x4>
	...

08004cfc <realloc>:
 8004cfc:	4b02      	ldr	r3, [pc, #8]	; (8004d08 <realloc+0xc>)
 8004cfe:	460a      	mov	r2, r1
 8004d00:	4601      	mov	r1, r0
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	f000 b8a0 	b.w	8004e48 <_realloc_r>
 8004d08:	20000010 	.word	0x20000010

08004d0c <_raise_r>:
 8004d0c:	291f      	cmp	r1, #31
 8004d0e:	b538      	push	{r3, r4, r5, lr}
 8004d10:	4604      	mov	r4, r0
 8004d12:	460d      	mov	r5, r1
 8004d14:	d904      	bls.n	8004d20 <_raise_r+0x14>
 8004d16:	2316      	movs	r3, #22
 8004d18:	6003      	str	r3, [r0, #0]
 8004d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d22:	b112      	cbz	r2, 8004d2a <_raise_r+0x1e>
 8004d24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d28:	b94b      	cbnz	r3, 8004d3e <_raise_r+0x32>
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f000 f830 	bl	8004d90 <_getpid_r>
 8004d30:	462a      	mov	r2, r5
 8004d32:	4601      	mov	r1, r0
 8004d34:	4620      	mov	r0, r4
 8004d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d3a:	f000 b817 	b.w	8004d6c <_kill_r>
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d00a      	beq.n	8004d58 <_raise_r+0x4c>
 8004d42:	1c59      	adds	r1, r3, #1
 8004d44:	d103      	bne.n	8004d4e <_raise_r+0x42>
 8004d46:	2316      	movs	r3, #22
 8004d48:	6003      	str	r3, [r0, #0]
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	e7e7      	b.n	8004d1e <_raise_r+0x12>
 8004d4e:	2400      	movs	r4, #0
 8004d50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d54:	4628      	mov	r0, r5
 8004d56:	4798      	blx	r3
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e7e0      	b.n	8004d1e <_raise_r+0x12>

08004d5c <raise>:
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <raise+0xc>)
 8004d5e:	4601      	mov	r1, r0
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	f7ff bfd3 	b.w	8004d0c <_raise_r>
 8004d66:	bf00      	nop
 8004d68:	20000010 	.word	0x20000010

08004d6c <_kill_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4c07      	ldr	r4, [pc, #28]	; (8004d8c <_kill_r+0x20>)
 8004d70:	2300      	movs	r3, #0
 8004d72:	4605      	mov	r5, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	f7fd fc09 	bl	8002590 <_kill>
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	d102      	bne.n	8004d88 <_kill_r+0x1c>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	b103      	cbz	r3, 8004d88 <_kill_r+0x1c>
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	bd38      	pop	{r3, r4, r5, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000b08 	.word	0x20000b08

08004d90 <_getpid_r>:
 8004d90:	f7fd bbf6 	b.w	8002580 <_getpid>

08004d94 <_malloc_r>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	1ccd      	adds	r5, r1, #3
 8004d98:	f025 0503 	bic.w	r5, r5, #3
 8004d9c:	3508      	adds	r5, #8
 8004d9e:	2d0c      	cmp	r5, #12
 8004da0:	bf38      	it	cc
 8004da2:	250c      	movcc	r5, #12
 8004da4:	2d00      	cmp	r5, #0
 8004da6:	4606      	mov	r6, r0
 8004da8:	db01      	blt.n	8004dae <_malloc_r+0x1a>
 8004daa:	42a9      	cmp	r1, r5
 8004dac:	d903      	bls.n	8004db6 <_malloc_r+0x22>
 8004dae:	230c      	movs	r3, #12
 8004db0:	6033      	str	r3, [r6, #0]
 8004db2:	2000      	movs	r0, #0
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	f000 f87d 	bl	8004eb4 <__malloc_lock>
 8004dba:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <_malloc_r+0xac>)
 8004dbc:	6814      	ldr	r4, [r2, #0]
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	b991      	cbnz	r1, 8004de8 <_malloc_r+0x54>
 8004dc2:	4c20      	ldr	r4, [pc, #128]	; (8004e44 <_malloc_r+0xb0>)
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	b91b      	cbnz	r3, 8004dd0 <_malloc_r+0x3c>
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f000 f863 	bl	8004e94 <_sbrk_r>
 8004dce:	6020      	str	r0, [r4, #0]
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f000 f85e 	bl	8004e94 <_sbrk_r>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d124      	bne.n	8004e26 <_malloc_r+0x92>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	6033      	str	r3, [r6, #0]
 8004de0:	4630      	mov	r0, r6
 8004de2:	f000 f868 	bl	8004eb6 <__malloc_unlock>
 8004de6:	e7e4      	b.n	8004db2 <_malloc_r+0x1e>
 8004de8:	680b      	ldr	r3, [r1, #0]
 8004dea:	1b5b      	subs	r3, r3, r5
 8004dec:	d418      	bmi.n	8004e20 <_malloc_r+0x8c>
 8004dee:	2b0b      	cmp	r3, #11
 8004df0:	d90f      	bls.n	8004e12 <_malloc_r+0x7e>
 8004df2:	600b      	str	r3, [r1, #0]
 8004df4:	50cd      	str	r5, [r1, r3]
 8004df6:	18cc      	adds	r4, r1, r3
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f000 f85c 	bl	8004eb6 <__malloc_unlock>
 8004dfe:	f104 000b 	add.w	r0, r4, #11
 8004e02:	1d23      	adds	r3, r4, #4
 8004e04:	f020 0007 	bic.w	r0, r0, #7
 8004e08:	1ac3      	subs	r3, r0, r3
 8004e0a:	d0d3      	beq.n	8004db4 <_malloc_r+0x20>
 8004e0c:	425a      	negs	r2, r3
 8004e0e:	50e2      	str	r2, [r4, r3]
 8004e10:	e7d0      	b.n	8004db4 <_malloc_r+0x20>
 8004e12:	428c      	cmp	r4, r1
 8004e14:	684b      	ldr	r3, [r1, #4]
 8004e16:	bf16      	itet	ne
 8004e18:	6063      	strne	r3, [r4, #4]
 8004e1a:	6013      	streq	r3, [r2, #0]
 8004e1c:	460c      	movne	r4, r1
 8004e1e:	e7eb      	b.n	8004df8 <_malloc_r+0x64>
 8004e20:	460c      	mov	r4, r1
 8004e22:	6849      	ldr	r1, [r1, #4]
 8004e24:	e7cc      	b.n	8004dc0 <_malloc_r+0x2c>
 8004e26:	1cc4      	adds	r4, r0, #3
 8004e28:	f024 0403 	bic.w	r4, r4, #3
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d005      	beq.n	8004e3c <_malloc_r+0xa8>
 8004e30:	1a21      	subs	r1, r4, r0
 8004e32:	4630      	mov	r0, r6
 8004e34:	f000 f82e 	bl	8004e94 <_sbrk_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d0cf      	beq.n	8004ddc <_malloc_r+0x48>
 8004e3c:	6025      	str	r5, [r4, #0]
 8004e3e:	e7db      	b.n	8004df8 <_malloc_r+0x64>
 8004e40:	200009fc 	.word	0x200009fc
 8004e44:	20000a00 	.word	0x20000a00

08004e48 <_realloc_r>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	4607      	mov	r7, r0
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	460e      	mov	r6, r1
 8004e50:	b921      	cbnz	r1, 8004e5c <_realloc_r+0x14>
 8004e52:	4611      	mov	r1, r2
 8004e54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e58:	f7ff bf9c 	b.w	8004d94 <_malloc_r>
 8004e5c:	b922      	cbnz	r2, 8004e68 <_realloc_r+0x20>
 8004e5e:	f000 f82b 	bl	8004eb8 <_free_r>
 8004e62:	4625      	mov	r5, r4
 8004e64:	4628      	mov	r0, r5
 8004e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e68:	f000 f874 	bl	8004f54 <_malloc_usable_size_r>
 8004e6c:	42a0      	cmp	r0, r4
 8004e6e:	d20f      	bcs.n	8004e90 <_realloc_r+0x48>
 8004e70:	4621      	mov	r1, r4
 8004e72:	4638      	mov	r0, r7
 8004e74:	f7ff ff8e 	bl	8004d94 <_malloc_r>
 8004e78:	4605      	mov	r5, r0
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d0f2      	beq.n	8004e64 <_realloc_r+0x1c>
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4622      	mov	r2, r4
 8004e82:	f7ff ff27 	bl	8004cd4 <memcpy>
 8004e86:	4631      	mov	r1, r6
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f000 f815 	bl	8004eb8 <_free_r>
 8004e8e:	e7e9      	b.n	8004e64 <_realloc_r+0x1c>
 8004e90:	4635      	mov	r5, r6
 8004e92:	e7e7      	b.n	8004e64 <_realloc_r+0x1c>

08004e94 <_sbrk_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4c06      	ldr	r4, [pc, #24]	; (8004eb0 <_sbrk_r+0x1c>)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	f7fd fb90 	bl	80025c4 <_sbrk>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_sbrk_r+0x1a>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_sbrk_r+0x1a>
 8004eac:	602b      	str	r3, [r5, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000b08 	.word	0x20000b08

08004eb4 <__malloc_lock>:
 8004eb4:	4770      	bx	lr

08004eb6 <__malloc_unlock>:
 8004eb6:	4770      	bx	lr

08004eb8 <_free_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4605      	mov	r5, r0
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	d045      	beq.n	8004f4c <_free_r+0x94>
 8004ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec4:	1f0c      	subs	r4, r1, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bfb8      	it	lt
 8004eca:	18e4      	addlt	r4, r4, r3
 8004ecc:	f7ff fff2 	bl	8004eb4 <__malloc_lock>
 8004ed0:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <_free_r+0x98>)
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	b933      	cbnz	r3, 8004ee6 <_free_r+0x2e>
 8004ed8:	6063      	str	r3, [r4, #4]
 8004eda:	6014      	str	r4, [r2, #0]
 8004edc:	4628      	mov	r0, r5
 8004ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee2:	f7ff bfe8 	b.w	8004eb6 <__malloc_unlock>
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	d90c      	bls.n	8004f04 <_free_r+0x4c>
 8004eea:	6821      	ldr	r1, [r4, #0]
 8004eec:	1862      	adds	r2, r4, r1
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	bf04      	itt	eq
 8004ef2:	681a      	ldreq	r2, [r3, #0]
 8004ef4:	685b      	ldreq	r3, [r3, #4]
 8004ef6:	6063      	str	r3, [r4, #4]
 8004ef8:	bf04      	itt	eq
 8004efa:	1852      	addeq	r2, r2, r1
 8004efc:	6022      	streq	r2, [r4, #0]
 8004efe:	6004      	str	r4, [r0, #0]
 8004f00:	e7ec      	b.n	8004edc <_free_r+0x24>
 8004f02:	4613      	mov	r3, r2
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	b10a      	cbz	r2, 8004f0c <_free_r+0x54>
 8004f08:	42a2      	cmp	r2, r4
 8004f0a:	d9fa      	bls.n	8004f02 <_free_r+0x4a>
 8004f0c:	6819      	ldr	r1, [r3, #0]
 8004f0e:	1858      	adds	r0, r3, r1
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d10b      	bne.n	8004f2c <_free_r+0x74>
 8004f14:	6820      	ldr	r0, [r4, #0]
 8004f16:	4401      	add	r1, r0
 8004f18:	1858      	adds	r0, r3, r1
 8004f1a:	4282      	cmp	r2, r0
 8004f1c:	6019      	str	r1, [r3, #0]
 8004f1e:	d1dd      	bne.n	8004edc <_free_r+0x24>
 8004f20:	6810      	ldr	r0, [r2, #0]
 8004f22:	6852      	ldr	r2, [r2, #4]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	4401      	add	r1, r0
 8004f28:	6019      	str	r1, [r3, #0]
 8004f2a:	e7d7      	b.n	8004edc <_free_r+0x24>
 8004f2c:	d902      	bls.n	8004f34 <_free_r+0x7c>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	e7d3      	b.n	8004edc <_free_r+0x24>
 8004f34:	6820      	ldr	r0, [r4, #0]
 8004f36:	1821      	adds	r1, r4, r0
 8004f38:	428a      	cmp	r2, r1
 8004f3a:	bf04      	itt	eq
 8004f3c:	6811      	ldreq	r1, [r2, #0]
 8004f3e:	6852      	ldreq	r2, [r2, #4]
 8004f40:	6062      	str	r2, [r4, #4]
 8004f42:	bf04      	itt	eq
 8004f44:	1809      	addeq	r1, r1, r0
 8004f46:	6021      	streq	r1, [r4, #0]
 8004f48:	605c      	str	r4, [r3, #4]
 8004f4a:	e7c7      	b.n	8004edc <_free_r+0x24>
 8004f4c:	bd38      	pop	{r3, r4, r5, pc}
 8004f4e:	bf00      	nop
 8004f50:	200009fc 	.word	0x200009fc

08004f54 <_malloc_usable_size_r>:
 8004f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f58:	1f18      	subs	r0, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bfbc      	itt	lt
 8004f5e:	580b      	ldrlt	r3, [r1, r0]
 8004f60:	18c0      	addlt	r0, r0, r3
 8004f62:	4770      	bx	lr

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
